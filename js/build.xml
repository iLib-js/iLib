<?xml version="1.0" encoding="UTF-8"?>
<!--
build.xml - build the javascript parts
Copyright Â© 2012-2015, JEDLSoft
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<!-- ======================================================================= -->
<!-- Main build file for the ilib js bits            -->
<!-- ======================================================================= -->
<project name="ilib" default="all">
	<!-- =================================================================== -->
	<!-- properties                                                          -->
	<!-- =================================================================== -->
	<!-- Give user a chance to override properties without editing this file -->
	<!-- (and without typing -D each time it compiles it)                    -->
	<property file="../build.properties"/>
	<property file="build.properties"/>
	<!-- Properties that can be overridden -->
	<!-- directories -->
	<property name="build.base"						value="${basedir}"/>
	<property name="build.dist"						value="${build.base}/../dist"/>
	<property name="build.export"					value="${build.base}/../export"/>
	<property name="build.demo"						value="${build.base}/../docs/demo"/>
	<property name="build.tools"					value="${build.base}/../tools"/>
	<property name="build.tools.qmlizer"			value="${build.base}/../tools/qmlizer"/>
	<property name="build.tools.build"				value="${build.base}/../tools/build"/>
	<property name="build.bin"						value="${build.base}/bin"/>
	<property name="build.lib"						value="${build.base}/lib"/>
	<property name="build.output"					value="${build.base}/output"/>
	<property name="build.output.reports"			value="${build.output}/reports"/>
	<property name="build.output.jsunit"			value="${build.output}/jsunit"/>
	<property name="build.output.js"				value="${build.output}/js"/>
	<property name="build.output.dyncode"			value="${build.output}/dyncode"/>
	<property name="build.output.test"				value="${build.output}/test"/>
	<property name="build.jsdoc"					value="${build.output}/jsdoc"/>
	<property name="build.data"						value="${build.base}/data"/>
	<property name="build.test"						value="${build.base}/test"/>
	<property name="build.locale.src"				value="${build.data}/locale"/>
	<property name="build.locale"					value="${build.base}/locale"/>
	<property name="build.config"					value="config"/>
	<property name="log4j.config.file"				value="${build.config}/log4j.properties"/>
	<property name="build.bin"						value="${build.base}/../bin"/>
	<property name="jar.ilib"					    value="ilib.jar"/>
	<!-- =================================================================== -->
	<!-- Class paths                                                         -->
	<!-- =================================================================== -->
	<path id="project.class.path.base">
		<fileset dir="${build.lib}">
			<include name="**/*.jar"/>
		</fileset>
		<pathelement path="${build.config}"/>
	</path>
	<path id="project.class.path.release">
		<pathelement path="${build.classes.release}"/>
		<path refid="project.class.path.base"/>
	</path>
	<path id="project.class.path.debug">
		<pathelement path="${build.classes.debug}"/>
		<path refid="project.class.path.base"/>
	</path>
	<path id="project.classpath.junit">
		<path refid="project.class.path.debug"/>
	</path>
	<path id="project.classpath.jsa">
		<fileset dir="../java/output/release">
			<include name="*.jar"/>
		</fileset>
		<fileset dir="../java/lib">
			<include name="*.jar"/>
		</fileset>
		<pathelement path="../java/config"/>
	</path>
	<taskdef name="jscomp"
		classname="com.google.javascript.jscomp.ant.CompileTask"
		classpath="${CLOSURECOMP}/compiler.jar"/>
	<!-- =================================================================== -->
	<!-- Implement the standard targets                                      -->
	<!-- =================================================================== -->
	<target name="all" depends="dist,doc,demo" description="Build everything. This is the target that the build should run."/>

	<target name="clean" description="Remove all generated files to start from scratch">
		<delete dir="${build.classes}"/>
		<delete dir="${build.output}"/>
		<delete>
			<fileset dir="${build.locale.src}">
			    <include name="**/localeinfo.json"/>
			</fileset>
		</delete>
		<delete file="${build.locale.src}/localeinfo.stamp"/>
		<delete file="${build.locale.src}/jsoncompress.stamp"/>
		<delete file="${build.demo}/demo.tgz"/>
		<delete file="${build.demo}/scripts/ilib-demo.js"/>
		<delete file="${build.base}/package.json"/>
		<delete dir="${build.locale}"/>
	</target>
	<target name="prepare" description="Prepare all directories that are needed before the project can be built">
		<mkdir dir="${build.output.reports}"/>
		<mkdir dir="${build.output.js}"/>
		<mkdir dir="${build.output.dyncode}"/>
		<mkdir dir="${build.output.test}"/>
	</target>
	<!-- =================================================================== -->
	<!-- Create the core jar file                                            -->
	<!-- =================================================================== -->
	<macrodef name="runassemble">
        <attribute name="tgtfilename"/>
        <attribute name="srcfilename"/>
        <attribute name="locales"/>
		<sequential>
			<java dir="${build.lib}"
					fork="true"
					maxmemory="6000m"
					classname="com.ilib.tools.jsa.JSAssemble"
					classpathref="project.classpath.jsa">
				<arg value="-I"/>
				<arg value="${build.locale}"/>
				<arg value="-I"/>
				<arg value="${build.lib}"/>
				<arg value="-o"/>
				<arg value="@{tgtfilename}"/>
				<arg value="-l"/>
				<arg value="@{locales}"/>
				<arg value="-v"/>
				<arg value="${version}"/>
				<arg value="@{srcfilename}"/>
			</java>
		</sequential>
	</macrodef>
	<target name="testilib.web.async" description="test whether or not the ilib-web-async.js file needs to be rebuilt">
		<uptodate property="core.ilib.web.async.not.needed" targetfile="${build.output.js}/ilib-web-async.js">
			<srcfiles dir="${build.lib}" includes="Loader.js,Path.js,WebLoader.js,ilib-web-async-inc.js"/>
		</uptodate>
	</target>
	<target name="assemble.web.async" depends="prepare,testilib.web.async" unless="core.ilib.web.async.not.needed" description="assembles the ilib-web-async.js file">
		<runassemble
			tgtfilename="${build.output.js}/ilib-web-async.js"
			srcfilename="${build.lib}/ilib-web-async-inc.js"
			locales=""/>
		<jscomp compilationlevel="simple"
			warning="verbose"
			debug="true"
			output="${build.output.js}/ilib-web-async-compiled.js"
			description="Use the google closure compiler to compress code"
			encoding="utf-8">
			<externs dir="${build.lib}">
				<file name="ilib-web-async-externs.js"/>
			</externs>
			<sources dir="${build.output.js}">
				<file name="ilib-web-async.js"/>
			</sources>
		</jscomp>
	</target>
	<target name="testilib.core" description="test whether or not the ilib-core single file needs to be rebuilt">
		<uptodate property="core.ilib.core.not.needed" targetfile="${build.output.js}/ilib-core-compiled.js">
			<srcfiles dir="${build.lib}" includes="**/*.js" excludes="ilib-*.js,**/test/**,runner.js,*Loader.js" />
			<srcfiles dir="${build.lib}" includes="ilib-core-inc.js"/>
			<srcfiles dir="${build.locale}" includes="**/*.json" />
		</uptodate>
	</target>
	<target name="assemble.core" depends="prepare,gen.manifest.locale,testilib.core" unless="core.ilib.core.not.needed" description="assembles the js files into a single file in the right order to satisfy dependencies">
		<runassemble
			tgtfilename="${build.output.js}/ilib-core.js"
			srcfilename="${build.lib}/ilib-core-inc.js"
			locales="en-AU,en-CA,en-GB,en-IN,en-NG,en-PH,en-PK,en-US,en-ZA,de-DE,fr-CA,fr-FR,es-AR,es-ES,es-MX,id-ID,it-IT,ja-JP,ko-KR,pt-BR,ru-RU,tr-TR,vi-VN,zxx-XX,zh-CN,zh-HK,zh-TW,zh-SG"/>
		<jscomp compilationlevel="simple"
			warning="verbose"
			debug="true"
			output="${build.output.js}/ilib-core-compiled.js"
			description="Use the google closure compiler to compress code"
			encoding="utf-8">
			<externs dir="${build.lib}">
				<file name="externs.js"/>
			</externs>
			<sources dir="${build.output.js}">
				<file name="ilib-core.js"/>
			</sources>
		</jscomp>
	</target>
	<target name="testilib.datesonly" description="test whether or not the ilib-datesonly single file needs to be rebuilt">
		<uptodate property="datesonly.ilib.datesonly.not.needed" targetfile="${build.output.js}/ilib-datesonly-compiled.js">
			<srcfiles dir="${build.lib}" includes="**/*.js" excludes="ilib-*.js,**/test/**,runner.js,*Loader.js" />
			<srcfiles dir="${build.lib}" includes="ilib-datesonly-inc.js"/>
			<srcfiles dir="${build.locale}" includes="**/*.json" />
		</uptodate>
	</target>
	<target name="assemble.datesonly" depends="prepare,gen.manifest.locale,testilib.datesonly" unless="datesonly.ilib.datesonly.not.needed" description="assembles the js files into a single file in the right order to satisfy dependencies">
		<runassemble
			tgtfilename="${build.output.js}/ilib-datesonly.js"
			srcfilename="${build.lib}/ilib-datesonly-inc.js"
			locales="ar-AE,ar-BH,ar-DJ,ar-DZ,ar-EG,ar-IQ,ar-JO,ar-KW,ar-LB,ar-LY,ar-MA,ar-MR,ar-OM,ar-QA,ar-SA,ar-SD,ar-SY,ar-TN,ar-YE,as-IN,az-AZ,az-Latn-AZ,bg-BG,bn-IN,bs-Latn-BA,bs-Latn-ME,cs-CZ,da-DK,de-AT,de-CH,de-DE,de-LU,et-EE,el-CY,el-GR,en-AM,en-AU,en-AZ,en-CA,en-ET,en-GB,en-GH,en-GM,en-HK,en-IE,en-IN,en-IS,en-KE,en-LK,en-LR,en-MM,en-MW,en-MY,en-NG,en-NZ,en-PH,en-PK,en-PR,en-RW,en-SD,en-SG,en-SL,en-TZ,en-UG,en-US,en-ZA,en-ZM,es-AR,es-BO,es-CL,es-CO,es-CR,es-DO,es-EC,es-ES,es-GQ,es-GT,es-HN,es-MX,es-NI,es-PA,es-PE,es-PH,es-PR,es-PY,es-SV,es-US,es-UY,es-VE,fa-AF,fa-IR,fi-FI,fr-BE,fr-BF,fr-BJ,fr-CA,fr-CD,fr-CF,fr-CG,fr-CH,fr-CI,fr-CM,fr-GQ,fr-DJ,fr-DZ,fr-FR,fr-GA,fr-GN,fr-LB,fr-LU,fr-ML,fr-RW,fr-SN,fr-TG,ga-IE,gu-IN,he-IL,hi-IN,hi-SG,hr-HR,hr-ME,hu-HU,id-ID,it-CH,it-IT,ja-JP,kk-Cyrl-KZ,km-KH,kn-IN,ko-KR,ku-Arab-IQ,lt-LT,lv-LV,mk-MK,ml-IN,mn-Cyrl-MN,mr-IN,ms-MY,ms-SG,nb-NO,nl-BE,nl-NL,pa-IN,pa-PK,pl-PL,pt-AO,pt-BR,pt-GQ,pt-CV,pt-PT,ro-RO,ru-BY,ru-GE,ru-KG,ru-KZ,ru-RU,ru-UA,sk-SK,sl-SI,sq-AL,sq-ME,sr-Latn-ME,sr-Latn-RS,sv-FI,sv-SE,ta-IN,ta-SG,te-IN,th-TH,tr-AM,tr-AZ,tr-CY,tr-TR,uk-UA,ur-IN,ur-PK,uz-Cyrl-UZ,uz-Latn-UZ,vi-VN,zh-Hans-CN,zh-Hans-SG,zh-Hant-HK,zh-Hans-MY,zh-Hant-TW"/>

		<jscomp compilationlevel="simple"
			warning="verbose"
			debug="true"
			output="${build.output.js}/ilib-datesonly-compiled.js"
			description="Use the google closure compiler to compress code"
			encoding="utf-8">
			<externs dir="${build.lib}">
				<file name="externs.js"/>
			</externs>
			<sources dir="${build.output.js}">
				<file name="ilib-datesonly.js"/>
			</sources>
		</jscomp>
	</target>
	<target name="testilib.standard" description="test whether or not the ilib-standard single file needs to be rebuilt">
		<uptodate property="core.ilib.standard.not.needed" targetfile="${build.output.js}/ilib-standard-compiled.js">
			<srcfiles dir="${build.lib}" includes="**/*.js" excludes="ilib-*.js,**/test/**,runner.js,*Loader.js" />
			<srcfiles dir="${build.lib}" includes="ilib-standard-inc.js"/>
			<srcfiles dir="${build.locale}" includes="**/*.json" />
		</uptodate>
	</target>
	<target name="assemble.standard" depends="prepare,gen.manifest.locale,testilib.standard" unless="core.ilib.standard.not.needed" description="assembles the js files into a single file in the right order to satisfy dependencies">
		<runassemble
			tgtfilename="${build.output.js}/ilib-standard.js"
			srcfilename="${build.lib}/ilib-standard-inc.js"
			locales="en-AU,en-CA,en-GB,en-IN,en-NG,en-PH,en-PK,en-US,en-ZA,de-DE,fr-CA,fr-FR,es-AR,es-ES,es-MX,id-ID,it-IT,ja-JP,ko-KR,pt-BR,ru-RU,tr-TR,vi-VN,zxx-XX,zh-CN,zh-HK,zh-TW,zh-SG"/>
		<jscomp compilationlevel="simple"
			warning="verbose"
			debug="true"
			output="${build.output.js}/ilib-standard-compiled.js"
			description="Use the google closure compiler to compress code"
			encoding="utf-8">
			<externs dir="${build.lib}">
				<file name="externs.js"/>
			</externs>
			<sources dir="${build.output.js}">
				<file name="ilib-standard.js"/>
			</sources>
		</jscomp>
	</target>
	<target name="testilib.full" description="test whether or not the ilib-full single file needs to be rebuilt">
		<uptodate property="core.ilib.full.not.needed" targetfile="${build.output.js}/ilib-full-compiled.js">
			<srcfiles dir="${build.lib}" includes="**/*.js" excludes="ilib-*.js,**/test/**,runner.js,*Loader.js" />
			<srcfiles dir="${build.lib}" includes="ilib-full-inc.js"/>
			<srcfiles dir="${build.locale}" includes="**/*.json" />
		</uptodate>
	</target>
	<target name="assemble.full" depends="prepare,gen.manifest.locale,testilib.full" unless="core.ilib.full.not.needed" description="assembles the js files into a single file in the right order to satisfy dependencies">
		<runassemble
			tgtfilename="${build.output.js}/ilib-full.js"
			srcfilename="${build.lib}/ilib-full-inc.js"
			locales="en-AU,en-CA,en-GB,en-IN,en-NG,en-PH,en-PK,en-US,en-ZA,de-DE,fr-CA,fr-FR,es-AR,es-ES,es-MX,id-ID,it-IT,ja-JP,ko-KR,pt-BR,ru-RU,tr-TR,vi-VN,zxx-XX,zh-CN,zh-HK,zh-TW,zh-SG"/>
		<jscomp compilationlevel="simple"
			warning="verbose"
			debug="true"
			output="${build.output.js}/ilib-full-compiled.js"
			description="Use the google closure compiler to compress code"
			encoding="utf-8">
			<externs dir="${build.lib}">
				<file name="externs.js"/>
			</externs>
			<sources dir="${build.output.js}">
				<file name="ilib-full.js"/>
			</sources>
		</jscomp>
	</target>
	<target name="testilibut.maps" description="test whether or not the ilib-ut-maps single file needs to be rebuilt">
		<uptodate property="ilib-ut-maps.not.needed" targetfile="${build.output.js}/ilib-ut-maps-compiled.js">
			<srcfiles dir="${build.lib}" includes="**/charmaps/*.js,Charset.js,Charmap*.js,ISO2022.js,UTF*.js,ilib.js" excludes="ilib-*.js,**/test/**,runner.js,*Loader.js"/>
			<srcfiles dir="${build.lib}" includes="ilib-ut-maps-inc.js"/>
			<srcfiles dir="${build.locale}" includes="**/*.json"/>
		</uptodate>
	</target>
	<target name="assemble.unittest.maps" depends="prepare,gen.manifest.locale,testilibut.maps" unless="ilib-ut-maps.not.needed" description="assembles only the locales needed for the maps unit tests">
		<runassemble
			tgtfilename="${build.output.js}/ilib-ut-maps.js"
			srcfilename="${build.lib}/ilib-ut-maps-inc.js"
			locales="aa-DJ,af-NA,agq-CM,ak-GH,am-ET,ar-AE,ar-BH,ar-DJ,ar-DZ,ar-EG,ar-IQ,ar-JO,ar-KW,ar-LB,ar-LY,ar-MA,ar-MR,ar-OM,ar-QA,ar-SA,ar-SD,ar-SY,ar-TN,ar-YE,asa-TZ,as-IN,az-AZ,az-Latn-AZ,bas-CM,be-BY,bem-ZM,bg-BG,bh-IN,bm-ML,bn-IN,br-FR,bs-BS,bs-Cyrl-BA,bs-Latn-BA,bs-ME,ca-FR,cop-EG,cs-CZ,da-DK,de-AT,de-DE,el-GR,en-AM,en-AU,en-CA,en-CA-Latn,en-ET,en-GB,en-GH,en-GM,en-HK,en-IE,en-IN,en-IS,en-KE,en-LK,en-LR,en-MW,en-MY,en-NG,en-NZ,en-PA,en-PH,en-PK,en-PR,en-RW,en-SD,en-SG,en-SL,en-TZ,en-UG,en-US,en-ZA,en-ZM,es-AR,es-BO,es-CL,es-CO,es-CR,es-DO,es-EC,es-ES,es-GQ,es-GT,es-HN,es-MX,es-NI,es-PA,es-PE,es-PY,es-SV,es-UY,es-VE,et-EE,fa-AF,fa-IR,ff-SN,fi-FI,fj-FJ,fo-FO,fr-AD,fr-BE,fr-BF,fr-BJ,fr-CA,fr-CD,fr-CF,fr-CG,fr-CH,fr-CI,fr-CM,fr-DJ,fr-DZ,fr-FR,fr-GA,fr-GN,fr-LB,fr-LU,fr-MG,fr-ML,fr-RW,fr-SN,fr-TG,fr-YT,ga-IE,gl-ES,gu-IN,ha-Latn-NG,he-IL,hi-IN,hr-HR,hr-ME,hu-HU,hy-AZ,hy-AM,id-ID,id-MY,it-CH,it-IT,it-SM,ja-JP,ka-IR,kk-Cyrl-KZ,kk-KZ-Cyrl,km-KH,kn-IN,ko-KR,ks-IN-Arab,ku-Arab-IQ,ku-Arab-IR,ku-IR,lg-UG,ln-CF,lt-LT,lv-LV,MA-Latn,mi-CK,mk-MK,ml-IN,mm-MM,mn-CN,mn-Cyrl-MN,mr-IN,ms-BN,ms-MY,ne-NP,nl-BE,nl-NL,nb-NO,nn-NO,no-NO,no-SJ,om-ET,or-IN,os-RU,pa-Arab,pa-IN,pa-PK-Arab,pl-PL,ps-AF,pt-AO,pt-BR,pt-CV,pt-GW,pt-MO,pt-MZ,pt-PT,pt-ST,pt-TL,ro-RO,ro-RS,ru-GE,ru-KG,ru-KZ,ru-RU,ru-TM,shi-MA-Tfng,si-LK,sk-SK,sl-SI,sl-SL,so-ET,so-SO,sq-AL,sq-ME,sq-MK,sr-BA-Cyrl,sr-BA-Latn,sr-Latn-RS,sr-ME-Latn,sr-RS,sr-RS-Latn,ss-ZA,st-LS,sv-FI,sv-SE,sw-KE,sw-UG,ta-IN,ta-LK,ta-MY,ta-SG,te-IN,th-TH,tr-TR,uk-UA,ur-IN,ur-PK,uz-AF,uz-AF-Arab,uz-Cyrl-UZ,uz-Latn-UZ,uz-UZ,uz-UZ-Latn,vai-LR-Latn,vi-VN,zh-CN,zh-CN-Hans,zh-Hant-HK,zh-Hans-MY,zh-Hant-TW,zh-HK,zh-HK-Hans,zh-Hans-MO,zh-Hant-MO,zh-MY,zh-SG,zh-SG-Hans,zh-TW,zh-TW-Hant,zh-US-Hant,zu-ZA,zxx-Cyrl-XX,zxx-Hans-XX,zxx-Hebr-XX,zxx-XX"/>
		<jscomp compilationlevel="simple"
			warning="verbose"
			debug="true"
			output="${build.output.js}/ilib-ut-maps-compiled.js"
			description="Use the google closure compiler to compress code"
			encoding="utf-8">
			<externs dir="${build.lib}">
				<file name="externs.js"/>
			</externs>
			<sources dir="${build.output.js}">
				<file name="ilib-ut-maps.js"/>
			</sources>
		</jscomp>
	</target>
	<target name="testilib.dyn.ut.maps" description="test whether or not the ilib-dyn-ut-maps single file needs to be rebuilt">
		<uptodate property="ilib-dyn-ut-maps.not.needed" targetfile="${build.output.js}/ilib-ut-maps-dyn.js">
			<srcfiles dir="${build.lib}" includes="**/*.js" excludes="ilib-*.js,**/test/**,runner.js,*Loader.js"/>
			<srcfiles dir="${build.lib}" includes="ilib-ut-maps-inc.js"/>
			<srcfiles dir="${build.locale}" includes="**/*.json"/>
		</uptodate>
	</target>
	<target name="assemble.dyndata.unittest.maps" depends="prepare,gen.manifest.locale,testilib.dyn.ut.maps" unless="ilib-dyn-ut-maps.not.needed" description="assembles only the locales needed for the maps unit tests">
		<runassemble
			tgtfilename="${build.output.js}/ilib-ut-maps-dyn.js"
			srcfilename="${build.lib}/ilib-ut-maps-inc.js"
			locales=" "/>
		<jscomp compilationlevel="simple"
			warning="verbose"
			debug="true"
			output="${build.output.js}/ilib-ut-maps-dyn-compiled.js"
			description="Use the google closure compiler to compress code"
			encoding="utf-8">
			<externs dir="${build.lib}">
				<file name="externs.js"/>
			</externs>
			<sources dir="${build.output.js}">
				<file name="ilib-ut-maps-dyn.js"/>
			</sources>
		</jscomp>
	</target>
	<target name="assemble.dyncode.unittest.maps" depends="prepare,gen.manifest.locale" description="prepares dynamic load code for the maps unit tests"/>
	<target name="testilibut" description="test whether or not the ilib-ut single file needs to be rebuilt">
		<uptodate property="ilib-ut.not.needed" targetfile="${build.output.js}/ilib-ut-compiled.js">
			<srcfiles dir="${build.lib}" includes="**/*.js" excludes="ilib-*.js,**/test/**,runner.js,*Loader.js"/>
			<srcfiles dir="${build.lib}" includes="ilib-ut-inc.js"/>
			<srcfiles dir="${build.locale}" includes="**/*.json"/>
		</uptodate>
	</target>
	<target name="assemble.unittest" depends="prepare,gen.manifest.locale,update.package.json,testilibut" unless="ilib-ut.not.needed" description="assembles only the locales needed for the unit tests">
		<runassemble
			tgtfilename="${build.output.js}/ilib-ut.js"
			srcfilename="${build.lib}/ilib-ut-inc.js"
			locales="aa-DJ,af-NA,agq-CM,ak-GH,am-ET,ar-AE,ar-BH,ar-DJ,ar-DZ,ar-EG,ar-IQ,ar-JO,ar-KW,ar-LB,ar-LY,ar-MA,ar-MR,ar-OM,ar-QA,ar-SA,ar-SD,ar-SY,ar-TN,ar-YE,asa-TZ,as-IN,az-Latn-AZ,bas-CM,be-BY,bem-ZM,bg-BG,bh-IN,bm-ML,bn-IN,br-FR,bs-BS,bs-Cyrl-BA,bs-Latn-BA,bs-ME,ca-FR,cop-EG,cs-CZ,da-DK,de-AT,de-DE,el-GR,en-AM,en-AU,en-CA,en-CA-Latn,en-ET,en-GB,en-GH,en-GM,en-HK,en-IE,en-IN,en-IS,en-KE,en-LK,en-LR,en-MW,en-MY,en-NG,en-NZ,en-PA,en-PH,en-PK,en-PR,en-RW,en-SD,en-SG,en-SL,en-TZ,en-UG,en-US,en-ZA,en-ZM,es-AR,es-BO,es-CL,es-CO,es-CR,es-DO,es-EC,es-ES,es-GQ,es-GT,es-HN,es-MX,es-NI,es-PA,es-PE,es-PR,es-PY,es-SV,es-UY,es-VE,et-EE,fa-AF,fa-IR,ff-SN,fi-FI,fj-FJ,fo-FO,fr-AD,fr-BE,fr-BF,fr-BJ,fr-CA,fr-CD,fr-CF,fr-CG,fr-CH,fr-CI,fr-CM,fr-DJ,fr-DZ,fr-FR,fr-GA,fr-GN,fr-LB,fr-LU,fr-MG,fr-ML,fr-RW,fr-SN,fr-TG,fr-YT,ga-IE,gl-ES,gu-IN,ha-Latn-NG,he-IL,hi-IN,hr-HR,hr-ME,hu-HU,hy-AZ,hy-AM,id-ID,id-MY,it-CH,it-IT,it-SM,ja-JP,ka-IR,kk-Cyrl-KZ,kk-KZ-Cyrl,km-KH,kn-IN,ko-KR,ks-IN-Arab,ku-Arab-IQ,ku-Arab-IR,ku-IR,lg-UG,ln-CF,lt-LT,lv-LV,MA-Latn,mi-CK,mk-MK,ml-IN,mm-MM,mn-CN,mn-Cyrl-MN,mr-IN,ms-BN,ms-MY,ne-NP,nl-BE,nl-NL,nb-NO,nn-NO,no-NO,no-SJ,om-ET,or-IN,os-RU,pa-Arab,pa-IN,pa-PK-Arab,pl-PL,ps-AF,pt-AO,pt-BR,pt-CV,pt-GW,pt-GQ,pt-MO,pt-MZ,pt-PT,pt-ST,pt-TL,ro-RO,ro-RS,ru-GE,ru-KG,ru-KZ,ru-RU,ru-TM,shi-MA-Tfng,si-LK,sk-SK,sl-SI,sl-SL,so-ET,so-SO,sq-AL,sq-ME,sq-MK,sr-BA-Cyrl,sr-BA-Latn,sr-Latn-RS,sr-ME-Latn,sr-RS,sr-RS-Latn,ss-ZA,st-LS,sv-FI,sv-SE,sw-KE,sw-UG,ta-IN,ta-LK,ta-MY,ta-SG,te-IN,th-TH,tr-TR,uk-UA,ur-IN,ur-PK,uz-AF,uz-AF-Arab,uz-Cyrl-UZ,uz-Latn-UZ,uz-UZ,uz-UZ-Latn,vai-LR-Latn,vi-VN,zh-CN,zh-CN-Hans,zh-Hant-HK,zh-Hans-MY,zh-Hant-TW,zh-HK,zh-HK-Hans,zh-Hans-MO,zh-Hant-MO,zh-MY,zh-SG,zh-SG-Hans,zh-TW,zh-TW-Hant,zh-US-Hant,zu-ZA,zxx-Cyrl-XX,zxx-Hans-XX,zxx-Hebr-XX,zxx-XX"/>
		<jscomp compilationlevel="simple"
			warning="verbose"
			debug="true"
			output="${build.output.js}/ilib-ut-compiled.js"
			description="Use the google closure compiler to compress code"
			encoding="utf-8">
			<externs dir="${build.lib}">
				<file name="externs.js"/>
			</externs>
			<sources dir="${build.output.js}">
				<file name="ilib-ut.js"/>
			</sources>
		</jscomp>
	</target>
	<target name="testilib.dyn.ut" description="test whether or not the ilib-dyn-ut single file needs to be rebuilt">
		<uptodate property="ilib-dyn-ut.not.needed" targetfile="${build.output.js}/ilib-ut-dyn.js">
			<srcfiles dir="${build.lib}" includes="**/*.js" excludes="ilib-*.js,**/test/**,runner.js,*Loader.js"/>
			<srcfiles dir="${build.lib}" includes="ilib-ut-inc.js"/>
			<srcfiles dir="${build.locale}" includes="**/*.json"/>
		</uptodate>
	</target>
	<target name="assemble.dyndata.unittest" depends="prepare,gen.manifest.locale,testilib.dyn.ut" unless="ilib-dyn-ut.not.needed" description="assembles only the locales needed for the unit tests">
		<runassemble
			tgtfilename="${build.output.js}/ilib-ut-dyn.js"
			srcfilename="${build.lib}/ilib-ut-inc.js"
			locales=" "/>
		<jscomp compilationlevel="simple"
			warning="verbose"
			debug="true"
			output="${build.output.js}/ilib-ut-dyn-compiled.js"
			description="Use the google closure compiler to compress code"
			encoding="utf-8">
			<externs dir="${build.lib}">
				<file name="externs.js"/>
			</externs>
			<sources dir="${build.output.js}">
				<file name="ilib-ut-dyn.js"/>
			</sources>
		</jscomp>
	</target>
	<target name="assemble.dyncode.unittest" depends="prepare,gen.manifest.locale" description="prepares dynamic load code for the unit tests"/>
	<target name="testilibdemo" description="test whether or not the ilib-demo file needs to be rebuilt">
		<uptodate property="ilib-demo.not.needed" targetfile="${build.output.js}/ilib-demo-compiled.js">
			<srcfiles dir="${build.lib}" includes="**/*.js" excludes="ilib-*.js,**/test/**,runner.js,*Loader.js"/>
			<srcfiles dir="${build.lib}" includes="**/ilib-full-inc.js"/>
			<srcfiles dir="${build.locale}" includes="**/*.json"/>
		</uptodate>
	</target>
	<target name="assemble.demo" depends="prepare,gen.manifest.locale,testilibdemo" unless="ilib-demo.not.needed" description="assembles the js files into a single file for the demo">
		<runassemble
			tgtfilename="${build.output.js}/ilib-demo.js"
			srcfilename="${build.lib}/ilib-full-inc.js"
			locales="aa-DJ,af-NA,af-ZA,agq-CM,ak-GH,am-ET,ar-AE,ar-BH,ar-DJ,ar-DZ,ar-EG,ar-IQ,ar-JO,ar-KW,ar-LB,ar-LY,ar-MA,ar-MR,ar-OM,ar-QA,ar-SA,ar-SD,ar-SY,ar-TN,ar-YE,asa-TZ,as-IN,az-AZ,bas-CM,be-BY,bem-ZM,bg-BG,bh-IN,bm-ML,bn-IN,br-FR,bs-Cyrl-BA,bs-Latn-BA,bs-ME,ca-FR,cop-EG,cs-CZ,da-DK,de-AT,de-CH,de-DE,el-GR,en-AU,en-CA,en-CA-Latn,en-ET,en-GB,en-GH,en-GM,en-HK,en-IE,en-IN,en-KE,en-LK,en-LR,en-MW,en-MY,en-NG,en-NZ,en-PH,en-PK,en-PR,en-RW,en-SG,en-SL,en-TZ,en-UG,en-US,en-ZA,en-ZM,es-AR,es-CO,es-CR,es-DO,es-EC,es-ES,es-GQ,es-GT,es-HN,es-MX,es-SV,es-UY,es-VE,et-EE,fa-AF,fa-IR,ff-SN,fi-FI,fj-FJ,fr-AD,fr-BE,fr-BF,fr-BJ,fr-CA,fr-CD,fr-CF,fr-CG,fr-CH,fr-CI,fr-CM,fr-DJ,fr-DZ,fr-FR,fr-GA,fr-GN,fr-LB,fr-LU,fr-MG,fr-ML,fr-RW,fr-SN,fr-TG,fr-YT,ga-IE,gl-ES,gu-IN,ha-Latn-NG,he-IL,hi-IN,hr-HR,hr-ME,hu-HU,hy-AM,hy-AZ,id-ID,id-MY,it-CH,it-IT,it-SM,ja-JP,ka-IR,kk-KZ-Cyrl,km-KH,kn-IN,ko-KR,ks-IN-Arab,ku-IR,lg-UG,ln-CF,lt-LT,lv-LV,mi-CK,mk-MK,ml-IN,mn-CN,mr-IN,ms-BN,ms-MY,nb-NO,ne-IN,nl-BE,nl-CW,nl-GF,nl-NL,nl-SR,no-BV,no-NO,no-SJ,om-ET,or-IN,os-RU,pa-PK-Arab,pl-PL,pt-AO,pt-BR,pt-CV,pt-GW,pt-MO,pt-MZ,pt-PT,pt-ST,pt-TL,ro-RO,ro-RS,ru-KG,ru-KZ,ru-RU,ru-TM,si-LK,sk-SK,sl-SI,so-ET,so-SO,sq-AL,sq-ME,sq-MK,sr-BA-Cyrl,sr-BA-Latn,sr-ME-Latn,sr-RS,sr-RS-Latn,ss-ZA,st-LS,sv-FI,sv-SE,sw-UG,ta-LK,ta-MY,ta-SG,te-IN,th-TH,tr-TR,uk-UA,ur-IN,ur-PK,uz-AF,uz-AF-Arab,uz-Cyrl-UZ,uz-Latn-UZ,vai-LR-Latn,vi-VN,zh-Hans-CN,zh-Hans-MY,zh-Hant-HK,zh-Hans-MO,zh-Hans-SG,zh-Hant-TW,zh-Hant-US,zu-ZA,zxx-Cyrl-XX,zxx-Hans-XX,zxx-Hebr-XX,zxx-XX"/>
		<jscomp compilationlevel="simple"
			warning="verbose"
			debug="true"
			output="${build.output.js}/ilib-demo-compiled.js"
			description="Use the google closure compiler to compress code"
			encoding="utf-8">
			<externs dir="${build.lib}">
				<file name="externs.js"/>
			</externs>
			<sources dir="${build.output.js}">
				<file name="ilib-demo.js"/>
			</sources>
		</jscomp>
	</target>
	<target name="testilib.dyn.standard" description="test whether or not the standard-sized ilib file needs to be rebuilt">
		<uptodate property="ilib.dyn.standard.not.needed" targetfile="${build.output.js}/ilib-standard-dyn-compiled.js">
			<srcfiles dir="${build.lib}" includes="**/*.js" excludes="ilib-*.js,**/test/**,runner.js,*Loader.js"/>
			<srcfiles dir="${build.lib}" includes="ilib-standard-inc.js"/>
			<srcfiles dir="${build.locale}" includes="**/*.json"/>
		</uptodate>
	</target>
	<target name="assemble.dyndata.standard" depends="prepare,gen.manifest.locale,testilib.dyn.standard" unless="ilib.dyn.standard.not.needed" description="assembles the js files into a single file for use with dynamic locale data loading">
		<runassemble
			tgtfilename="${build.output.js}/ilib-standard-dyn.js"
			srcfilename="${build.lib}/ilib-standard-inc.js"
			locales=" "/>
		<jscomp compilationlevel="simple"
			warning="verbose"
			debug="true"
			output="${build.output.js}/ilib-standard-dyn-compiled.js"
			description="Use the google closure compiler to compress code"
			encoding="utf-8">
			<externs dir="${build.lib}">
				<file name="externs.js"/>
			</externs>
			<sources dir="${build.output.js}">
				<file name="ilib-standard-dyn.js"/>
			</sources>
		</jscomp>
	</target>
	<target name="testilib.dyn.core" description="test whether or not the ilib-core file needs to be rebuilt">
		<uptodate property="ilib.dyn.core.not.needed" targetfile="${build.output.js}/ilib-core-dyn-compiled.js">
			<srcfiles dir="${build.lib}" includes="**/*.js" excludes="ilib-*.js,**/test/**,runner.js,*Loader.js"/>
			<srcfiles dir="${build.lib}" includes="ilib-core-inc.js"/>
			<srcfiles dir="${build.locale}" includes="**/*.json"/>
		</uptodate>
	</target>
	<target name="assemble.dyndata.core" depends="prepare,gen.manifest.locale,testilib.dyn.core" unless="ilib.dyn.core.not.needed" description="assembles the core set of the js files into a single file">
		<runassemble
			tgtfilename="${build.output.js}/ilib-core-dyn.js"
			srcfilename="${build.lib}/ilib-core-inc.js"
			locales=" "/>
		<jscomp compilationlevel="simple"
			warning="verbose"
			debug="true"
			output="${build.output.js}/ilib-core-dyn-compiled.js"
			description="Use the google closure compiler to compress code"
			encoding="utf-8">
			<externs dir="${build.lib}">
				<file name="externs.js"/>
			</externs>
			<sources dir="${build.output.js}">
				<file name="ilib-core-dyn.js"/>
			</sources>
		</jscomp>
	</target>
	<target name="testilib.dyn.full" description="test whether or not the ilib-full file needs to be rebuilt">
		<uptodate property="ilib.dyn.full.not.needed" targetfile="${build.output.js}/ilib-full-dyn-compiled.js">
			<srcfiles dir="${build.lib}" includes="**/*.js" excludes="ilib-*.js,**/test/**,runner.js,*Loader.js"/>
			<srcfiles dir="${build.lib}" includes="ilib-full-inc.js"/>
			<srcfiles dir="${build.locale}" includes="**/*.json"/>
		</uptodate>
	</target>
	<target name="assemble.dyndata.full" depends="prepare,gen.manifest.locale,testilib.dyn.full" unless="ilib.dyn.full.not.needed" description="assembles the full set of the js files into a single file">
		<runassemble
			tgtfilename="${build.output.js}/ilib-full-dyn.js"
			srcfilename="${build.lib}/ilib-full-inc.js"
			locales=" "/>
		<jscomp compilationlevel="simple"
			warning="verbose"
			debug="true"
			output="${build.output.js}/ilib-full-dyn-compiled.js"
			description="Use the google closure compiler to compress code"
			encoding="utf-8">
			<externs dir="${build.lib}">
				<file name="externs.js"/>
			</externs>
			<sources dir="${build.output.js}">
				<file name="ilib-full-dyn.js"/>
			</sources>
		</jscomp>
	</target>
	<target name="assemble.dynamic" depends="prepare,gen.manifest.locale,install.uglify" description="compresses/minifies the dynamic load code files">
		<!-- handle ilib.js as a special case so we can replace the version number in it -->
		<copy file="${build.lib}/ilib.js" toFile="${build.output.js}/ilib.js" verbose="true"/>
		<replace token="// !macro ilibVersion" value='"${version}"' preserveLastModified="true">
		    <fileset dir="${build.output.js}" includes="ilib.js"/>
		</replace>
		<exec osfamily="unix" executable="node" dir="${build.base}" failifexecutionfails="true">
			<arg value="${uglify.location}/bin/uglifyjs"/>
			<arg value="${build.output.js}/ilib.js"/>
			<arg value="-o"/>
			<arg value="${build.output.dyncode}/ilib.js"/>
			<arg value="--no-mangle-functions"/>
		</exec>
		<exec osfamily="mac" executable="node" dir="${build.base}" failifexecutionfails="true">
			<arg value="${uglify.location}/bin/uglifyjs"/>
			<arg value="${build.output.js}/ilib.js"/>
			<arg value="-o"/>
			<arg value="${build.output.dyncode}/ilib.js"/>
			<arg value="--no-mangle-functions"/>
		</exec>
		<exec osfamily="windows" executable="node.exe" dir="${build.base}" failifexecutionfails="true">
			<arg value="${uglify.location}/bin/uglifyjs"/>
			<arg value="${build.output.js}/ilib.js"/>
			<arg value="-o"/>
			<arg value="${build.output.dyncode}/ilib.js"/>
			<arg value="--no-mangle-functions"/>
		</exec>
		<exec osfamily="unix" executable="node" dir="${build.base}" failifexecutionfails="true">
			<arg value="${build.tools.qmlizer}/qmlizer.js"/>
			<arg value="${build.output.dyncode}/ilib.js"/>
			<arg value="${build.output.dyncode}/ilib.js"/>
		</exec>
		<exec osfamily="mac" executable="node" dir="${build.base}" failifexecutionfails="true">
			<arg value="${build.tools.qmlizer}/qmlizer.js"/>
			<arg value="${build.output.dyncode}/ilib.js"/>
			<arg value="${build.output.dyncode}/ilib.js"/>
		</exec>
		<exec osfamily="windows" executable="node.exe" dir="${build.base}" failifexecutionfails="true">
			<arg value="${build.tools.qmlizer}/qmlizer.js"/>
			<arg value="${build.output.dyncode}/ilib.js"/>
			<arg value="${build.output.dyncode}/ilib.js"/>
		</exec>

		<!-- then do all the rest of them -->
		<apply osfamily="unix" executable="node" dest="${build.output.dyncode}" parallel="false">
			<arg value="${uglify.location}/bin/uglifyjs"/>
			<srcfile/>
			<arg value="-o"/>
			<targetfile/>
			<arg value="--no-mangle-functions"/>
			<fileset dir="${build.lib}" includes="*.js" excludes="ilib.js,ilib-*.js,runner.js,externs.js,datefmtstr.js"/>
			<fileset dir="${build.lib}" includes="ilib-node*.js,ilib-stubs*,ilib-web.js,ilib-qt.js"/>
			<mapper type="glob" from="*.js" to="*.js"/>
		</apply>
		<apply osfamily="mac" executable="node" dest="${build.output.dyncode}" parallel="false">
			<arg value="${uglify.location}/bin/uglifyjs"/>
			<srcfile/>
			<arg value="-o"/>
			<targetfile/>
			<arg value="--no-mangle-functions"/>
			<fileset dir="${build.lib}" includes="*.js"  excludes="ilib.js,ilib-*.js,runner.js,externs.js,datefmtstr.js"/>
			<fileset dir="${build.lib}" includes="ilib-node*.js,ilib-stubs*,ilib-web.js,ilib-qt.js"/>
			<mapper type="glob" from="*.js" to="*.js"/>
		</apply>
		<apply osfamily="windows" executable="node.exe" dest="${build.output.dyncode}" parallel="false">
			<arg value="${uglify.location}/bin/uglifyjs"/>
			<srcfile/>
			<arg value="-o"/>
			<targetfile/>
			<arg value="--no-mangle-functions"/>
			<fileset dir="${build.lib}" includes="*.js"  excludes="ilib-*.js,runner.js,externs.js,datefmtstr.js"/>
			<fileset dir="${build.lib}" includes="ilib-node*.js,ilib-stubs*,ilib-web.js,ilib-qt.js"/>
			<mapper type="glob" from="*.js" to="*.js"/>
		</apply>
		<apply osfamily="unix" executable="node" dest="${build.output.dyncode}" parallel="false" force="true">
			<arg value="${build.tools.qmlizer}/qmlizer.js"/>
			<srcfile/>
			<targetfile/>
			<fileset dir="${build.output.dyncode}" includes="*.js" excludes="ilib.js,ilib-*.js,runner.js,externs.js,datefmtstr.js"/>
			<fileset dir="${build.output.dyncode}" includes="ilib-node*.js,ilib-stubs*,ilib-web.js,ilib-qt.js"/>
			<mapper type="glob" from="*.js" to="*.js"/>
		</apply>
		<apply osfamily="mac" executable="node" dest="${build.output.dyncode}" parallel="false" force="true">
			<arg value="${build.tools.qmlizer}/qmlizer.js"/>
			<srcfile/>
			<targetfile/>
			<fileset dir="${build.output.dyncode}" includes="*.js" excludes="ilib.js,ilib-*.js,runner.js,externs.js,datefmtstr.js"/>
			<fileset dir="${build.output.dyncode}" includes="ilib-node*.js,ilib-stubs*,ilib-web.js,ilib-qt.js"/>
			<mapper type="glob" from="*.js" to="*.js"/>
		</apply>
		<apply osfamily="windows" executable="node.exe" dest="${build.output.dyncode}" parallel="false" force="true">
			<arg value="${build.tools.qmlizer}/qmlizer.js"/>
			<srcfile/>
			<targetfile/>
			<fileset dir="${build.output.dyncode}" includes="*.js" excludes="ilib.js,ilib-*.js,runner.js,externs.js,datefmtstr.js"/>
			<fileset dir="${build.output.dyncode}" includes="ilib-node*.js,ilib-stubs*,ilib-web.js,ilib-qt.js"/>
			<mapper type="glob" from="*.js" to="*.js"/>
		</apply>
	</target>
	<target name="testilib.lg" description="test whether or not the ilib-lg file needs to be rebuilt">
		<uptodate property="ilib-lg.not.needed" targetfile="${build.output.js}/ilib-lg-compiled.js">
			<srcfiles dir="${build.lib}" includes="**/*.js" excludes="ilib.js,ilib-*.js,*-compiled.js,**/test/**,runner.js,*Loader.js"/>
			<srcfiles dir="${build.lib}" includes="ilib-standard-inc.js"/>
			<srcfiles dir="${build.locale}" includes="**/*.json"/>
		</uptodate>
	</target>
	<target name="assemble.lg" depends="prepare,gen.manifest.locale,testilib.lg" unless="ilib-lg.not.needed" description="assembles the set of the js files and locales that LG needs into a single file">
		<runassemble
			tgtfilename="${build.output.js}/ilib-lg.js"
			srcfilename="${build.lib}/ilib-standard-inc.js"
			locales="en-US,en-GB,de-DE,es-ES,it-IT,fr-FR,fr-CA,pt-BR,ko-KR,zh-Hans-CN,ja-JP,ru-RU"/>
		<jscomp compilationlevel="simple"
			warning="verbose"
			debug="true"
			output="${build.output.js}/ilib-lg-compiled.js"
			description="Use the google closure compiler to compress code"
			encoding="utf-8">
			<externs dir="${build.lib}">
				<file name="externs.js"/>
			</externs>
			<sources dir="${build.output.js}">
				<file name="ilib-lg.js"/>
			</sources>
		</jscomp>
		<runassemble
			tgtfilename="ilib-lg-dyn.js"
			srcfilename="ilib-lg-inc.js"
			locales=" "/>
		<jscomp compilationlevel="simple"
			warning="verbose"
			debug="true"
			output="${build.output.js}/ilib-lg-dyn-compiled.js"
			description="Use the google closure compiler to compress code"
			encoding="utf-8">
			<externs dir="${build.lib}">
				<file name="externs.js"/>
			</externs>
			<sources dir="${build.lib}">
				<file name="ilib-lg-dyn.js"/>
			</sources>
		</jscomp>
	</target>

	<target name="export"
			description="export all files that other subprojects may need before building"
			depends="prepare,gen.manifest.locale">
		<mkdir dir="${build.export}/locale"/>
		<copy todir="${build.export}/locale">
			<fileset dir="${build.locale}">
				<include name="**/*.json"/>
			</fileset>
		</copy>
	</target>

	<target name="dist" depends="assemble.web.async,assemble.core,assemble.standard,assemble.full,assemble.dyndata.core,assemble.dyndata.standard,assemble.dyndata.full,assemble.dynamic,doc,demo,update.package.json" description="Create all distribution objects and exports them to the top level dir for packaging">
		<mkdir dir="${build.export}/js/assembled"/>
		<copy todir="${build.export}/js/assembled">
			<fileset dir="${build.output.js}">
				<include name="ilib-core.js"/>
				<include name="ilib-core-compiled.js"/>
				<include name="ilib-standard.js"/>
				<include name="ilib-standard-compiled.js"/>
				<include name="ilib-full.js"/>
				<include name="ilib-full-compiled.js"/>
				<include name="ilib-core-dyn.js"/>
				<include name="ilib-core-dyn-compiled.js"/>
				<include name="ilib-standard-dyn.js"/>
				<include name="ilib-standard-dyn-compiled.js"/>
				<include name="ilib-full-dyn.js"/>
				<include name="ilib-full-dyn-compiled.js"/>
				<include name="ilib-web-async.js"/>
				<include name="ilib-web-async-compiled.js"/>
			</fileset>
		</copy>
		<mkdir dir="${build.export}/js/dyncode"/>
		<copy todir="${build.export}/js/dyncode">
			<fileset dir="${build.output.dyncode}">
				<include name="**/*.js"/>
			</fileset>
		</copy>
		<mkdir dir="${build.export}/docs/jsdoc"/>
		<copy todir="${build.export}/docs/jsdoc">
			<fileset dir="${build.jsdoc}">
				<include name="**/*"/>
			</fileset>
		</copy>
		<mkdir dir="${build.export}/src/js"/>
		<copy todir="${build.export}/src/js">
			<fileset dir="${build.base}">
				<include name="src/**"/>
				<include name="build.xml"/>
				<include name="build.properties"/>
				<include name="data/locale/**/*.json"/>
				<include name="bin/**"/>
				<include name="lib/google-closure*/**"/>
				<exclude name="runner.js"/>
				<exclude name="**/test/**"/>
				<exclude name="**/*.html"/>
				<exclude name="src/ilib-*-inc.js"/>
			</fileset>
		</copy>
		<mkdir dir="${build.export}/package/locale"/>
		<copy todir="${build.export}/package">
			<fileset dir="${build.base}">
				<include name="package.json"/>
				<include name="../README.md"/>
			</fileset>
		</copy>
		<mkdir dir="${build.export}/package/lib"/>
		<copy todir="${build.export}/package/lib">
			<fileset dir="${build.export}/js/dyncode">
				<include name="**/*"/>
				<exclude name="QMLLoader.js"/>
				<exclude name="WebLoader.js"/>
				<exclude name="RhinoLoader.js"/>
				<exclude name="ilib-web.js"/>
				<exclude name="ilib-qt.js"/>
				<exclude name="ilib-rhino.js"/>
				<exclude name="ilib-enyo.js"/>
			</fileset>
			<fileset dir="${build.export}/js/assembled">
				<include name="ilib-full-dyn.js"/>
				<include name="ilib-full-dyn-compiled.js"/>
			</fileset>
		</copy>
		<copy todir="${build.export}/package/locale">
			<fileset dir="${build.locale}">
				<include name="**/*.json"/>
			</fileset>
		</copy>
	</target>
	<target name="demo" depends="assemble.demo" description="Copy all things needed for the demo site to the right place">
		<copy todir="${build.demo}/scripts">
			<fileset dir="${build.output.js}">
				<include name="ilib-demo.js"/>
			</fileset>
		</copy>
		<tar destfile="${build.demo}/demo.tgz" compression="gzip">
			<fileset dir="${build.demo}" id="id">
			    <include name="**/*.html"/>
				<include name="**/*.js"/>
				<include name="**/*.css"/>
				<include name="**/*.png"/>
			    <exclude name="**/.svn/**"/>
				<exclude name="demo.tgz"/>
			</fileset>
		</tar>
	</target>

	<macrodef name="run-nodeunit-all">
		<attribute name="assembly"/>
		<attribute name="compilation"/>
		<attribute name="sync"/>
		<attribute name="failquit"/>
		<sequential>
			<exec osfamily="unix" executable="node" dir="${build.test}" failifexecutionfails="@{failquit}" failonerror="@{failquit}">
				<arg line="testRunner.js"/>
				<arg line="@{assembly}"/>
				<arg line="@{compilation}"/>
				<arg line="all"/>
				<arg line="@{sync}"/>
			</exec>
			<exec osfamily="windows" executable="node.exe" dir="${build.test}" failifexecutionfails="@{failquit}"  failonerror="@{failquit}">
				<arg line="testRunner.js"/>
				<arg line="@{assembly}"/>
				<arg line="@{compilation}"/>
                <arg line="all"/>
                <arg line="@{sync}"/>
			</exec>
		</sequential>
	</macrodef>

	<macrodef name="run-nodeunit">
		<attribute name="suite"/>
		<attribute name="failquit"/>
		<attribute name="file"/>
		<sequential>
			<exec osfamily="unix" executable="node" dir="${build.test}" failifexecutionfails="@{failquit}" failonerror="@{failquit}">
				<arg line="@{suite}/nodeunit/@{file}"/>
			</exec>
			<exec osfamily="windows" executable="node.exe" dir="${build.test}" failifexecutionfails="@{failquit}"  failonerror="@{failquit}">
				<arg line="@{suite}/nodeunit/@{file}"/>
			</exec>
		</sequential>
	</macrodef>

	<macrodef name="run-nodeunit-sync">
		<attribute name="suite"/>
        <attribute name="failquit"/>
		<sequential>
		    <run-nodeunit suite="@{suite}" failquit="@{failquit}" file="testSuite.js"/>
		</sequential>
	</macrodef>
    <macrodef name="run-nodeunit-async">
        <attribute name="suite"/>
        <attribute name="failquit"/>
        <sequential>
            <run-nodeunit suite="@{suite}" failquit="@{failquit}" file="testSuiteAsync.js"/>
        </sequential>
    </macrodef>

	<macrodef name="debug-nodeunit">
		<attribute name="suite"/>
		<attribute name="failquit"/>
		<sequential>
			<exec osfamily="unix" executable="node" dir="${build.test}" failifexecutionfails="@{failquit}" failonerror="@{failquit}">
				<arg line="--inspect"/>
				<arg line="--debug-brk"/>
				<arg line="@{suite}/nodeunit/testSuite.js"/>
			</exec>
			<exec osfamily="windows" executable="node.exe" dir="${build.test}" failifexecutionfails="@{failquit}"  failonerror="@{failquit}">
				<arg line="--inspect"/>
				<arg line="--debug-brk"/>
				<arg line="@{suite}/nodeunit/testSuite.js"/>
			</exec>
		</sequential>
	</macrodef>

	<target depends="assemble.dyncode.unittest,update.package.json" name="test.address.nu">
		<run-nodeunit-sync suite="address" failquit="true"/>
		<run-nodeunit-async suite="address" failquit="true"/>
	</target>
	<target depends="assemble.dyncode.unittest,update.package.json" name="test.calendar.nu">
		<run-nodeunit-sync suite="calendar" failquit="true"/>
		<run-nodeunit-async suite="calendar" failquit="true"/>
	</target>
	<target depends="assemble.dyncode.unittest,update.package.json" name="test.collate.nu">
		<run-nodeunit-sync suite="collate" failquit="true"/>
		<run-nodeunit-async suite="collate" failquit="true"/>
	</target>
	<target depends="assemble.dyncode.unittest,update.package.json" name="test.ctype.nu">
		<run-nodeunit-sync suite="ctype" failquit="true"/>
		<run-nodeunit-async suite="ctype" failquit="true"/>
	</target>
	<target depends="assemble.dyncode.unittest,update.package.json" name="test.date.nu">
		<run-nodeunit-sync suite="date" failquit="true"/>
		<run-nodeunit-async suite="date" failquit="true"/>
	</target>
	<target depends="assemble.dyncode.unittest,update.package.json" name="test.daterange.nu">
		<run-nodeunit-sync suite="daterange" failquit="true"/>
		<run-nodeunit-async suite="daterange" failquit="true"/>
	</target>
	<target depends="assemble.dyncode.unittest,update.package.json" name="test.durfmt.nu">
		<run-nodeunit-sync suite="durfmt" failquit="true"/>
		<run-nodeunit-async suite="durfmt" failquit="true"/>
	</target>
	<target depends="assemble.dyncode.unittest,update.package.json" name="test.maps.nu">
		<run-nodeunit-sync suite="maps" failquit="true"/>
		<run-nodeunit-async suite="maps" failquit="true"/>
	</target>
	<target depends="assemble.dyncode.unittest,update.package.json" name="test.name.nu">
		<run-nodeunit-sync suite="name" failquit="true"/>
		<run-nodeunit-async suite="name" failquit="true"/>
	</target>
	<target depends="assemble.dyncode.unittest,update.package.json" name="test.number.nu">
		<run-nodeunit-sync suite="number" failquit="true"/>
		<run-nodeunit-async suite="number" failquit="true"/>
	</target>
	<target depends="assemble.dyncode.unittest,update.package.json" name="test.phone.nu">
		<run-nodeunit-sync suite="phone" failquit="true"/>
		<run-nodeunit-async suite="phone" failquit="true"/>
	</target>
	<target depends="assemble.dyncode.unittest,update.package.json" name="test.root.nu">
		<run-nodeunit-sync suite="root" failquit="true"/>
		<run-nodeunit-async suite="root" failquit="true"/>
	</target>
	<target depends="assemble.dyncode.unittest,update.package.json" name="test.strings-ext.nu">
		<run-nodeunit-sync suite="strings-ext" failquit="true"/>
		<run-nodeunit-async suite="strings-ext" failquit="true"/>
	</target>
	<target depends="assemble.dyncode.unittest,update.package.json" name="test.units.nu">
		<run-nodeunit-sync suite="units" failquit="true"/>
		<run-nodeunit-async suite="units" failquit="true"/>
	</target>
	<target depends="assemble.dyncode.unittest,update.package.json" name="test.util.nu">
		<run-nodeunit-sync suite="util" failquit="true"/>
	</target>

	<target depends="assemble.dyncode.unittest,update.package.json" name="debug.address.nu">
		<debug-nodeunit suite="address" failquit="true"/>
	</target>
	<target depends="assemble.dyncode.unittest,update.package.json" name="debug.calendar.nu">
		<debug-nodeunit suite="calendar" failquit="true"/>
	</target>
	<target depends="assemble.dyncode.unittest,update.package.json" name="debug.collate.nu">
		<debug-nodeunit suite="collate" failquit="true"/>
	</target>
	<target depends="assemble.dyncode.unittest,update.package.json" name="debug.ctype.nu">
		<debug-nodeunit suite="ctype" failquit="true"/>
	</target>
	<target depends="assemble.dyncode.unittest,update.package.json" name="debug.date.nu">
		<debug-nodeunit suite="date" failquit="true"/>
	</target>
	<target depends="assemble.dyncode.unittest,update.package.json" name="debug.daterange.nu">
		<debug-nodeunit suite="daterange" failquit="true"/>
	</target>
	<target depends="assemble.dyncode.unittest,update.package.json" name="debug.durfmt.nu">
		<debug-nodeunit suite="durfmt" failquit="true"/>
	</target>
	<target depends="assemble.dyncode.unittest,update.package.json" name="debug.maps.nu">
		<debug-nodeunit suite="maps" failquit="true"/>
	</target>
	<target depends="assemble.dyncode.unittest,update.package.json" name="debug.name.nu">
		<debug-nodeunit suite="name" failquit="true"/>
	</target>
	<target depends="assemble.dyncode.unittest,update.package.json" name="debug.number.nu">
		<debug-nodeunit suite="number" failquit="true"/>
	</target>
	<target depends="assemble.dyncode.unittest,update.package.json" name="debug.phone.nu">
		<debug-nodeunit suite="phone" failquit="true"/>
	</target>
	<target depends="assemble.dyncode.unittest,update.package.json" name="debug.root.nu">
		<debug-nodeunit suite="root" failquit="true"/>
	</target>
	<target depends="assemble.dyncode.unittest,update.package.json" name="debug.strings-ext.nu">
		<debug-nodeunit suite="strings-ext" failquit="true"/>
	</target>
	<target depends="assemble.dyncode.unittest,update.package.json" name="debug.units.nu">
		<debug-nodeunit suite="units" failquit="true"/>
	</target>
	<target depends="assemble.dyncode.unittest,update.package.json" name="debug.util.nu">
		<debug-nodeunit suite="util" failquit="true"/>
	</target>

	<target name="test.dynamic.uncompiled.nu" depends="update.package.json">
        <run-nodeunit-all assembly="dynamic" compilation="uncompiled" sync="async" failquit="true"/>
	    <run-nodeunit-all assembly="dynamic" compilation="uncompiled" sync="sync" failquit="true"/>
	</target>
	<target name="test.dynamic.compiled.nu" depends="update.package.json">
	    <run-nodeunit-all assembly="dynamic" compilation="compiled" sync="sync" failquit="true"/>
		<run-nodeunit-all assembly="dynamic" compilation="compiled" sync="async" failquit="true"/>
	</target>
	<target name="test.assembled.uncompiled.nu" depends="update.package.json,assemble.unittest">
	    <run-nodeunit-all assembly="assembled" compilation="uncompiled" sync="sync" failquit="true"/>
		<run-nodeunit-all assembly="assembled" compilation="uncompiled" sync="async" failquit="true"/>
	</target>
	<target name="test.assembled.compiled.nu" depends="update.package.json,assemble.unittest">
	    <run-nodeunit-all assembly="assembled" compilation="compiled" sync="sync" failquit="true"/>
		<run-nodeunit-all assembly="assembled" compilation="compiled" sync="async" failquit="true"/>
	</target>
	<target name="test.dyndata.uncompiled.nu" depends="assemble.dyndata.unittest,update.package.json">
	    <run-nodeunit-all assembly="dynamicdata" compilation="uncompiled" sync="sync" failquit="true"/>
		<run-nodeunit-all assembly="dynamicdata" compilation="uncompiled" sync="async" failquit="true"/>
	</target>
	<target name="test.dyndata.compiled.nu" depends="assemble.dyndata.unittest,update.package.json">
	    <run-nodeunit-all assembly="dynamicdata" compilation="compiled" sync="sync" failquit="true"/>
		<run-nodeunit-all assembly="dynamicdata" compilation="compiled" sync="async" failquit="true"/>
	</target>

	<target name="test.all.nu" depends="test.dynamic.uncompiled.nu,test.dynamic.compiled.nu,test.assembled.uncompiled.nu,test.assembled.compiled.nu,test.dyndata.uncompiled.nu,test.dyndata.compiled.nu" />

	<macrodef name="runtests">
        <attribute name="assembly"/>
        <attribute name="compilation"/>
        <attribute name="suite"/>
		<attribute name="sync"/>
		<attribute name="failquit"/>
		<sequential>
			<exec osfamily="unix" executable="node" dir="${build.test}" failifexecutionfails="@{failquit}" failonerror="@{failquit}">
				<arg line="testSuite.js"/>
				<arg line="@{assembly}"/>
				<arg line="@{compilation}"/>
				<arg line="@{suite}"/>
				<arg line="@{sync}"/>
			</exec>
			<exec osfamily="mac" executable="node" dir="${build.test}" failifexecutionfails="@{failquit}" failonerror="@{failquit}">
				<arg value="testSuite.js"/>
				<arg line="@{assembly}"/>
				<arg line="@{compilation}"/>
				<arg line="@{suite}"/>
				<arg line="@{sync}"/>
			</exec>
			<exec osfamily="windows" executable="node.exe" dir="${build.test}" failifexecutionfails="@{failquit}"  failonerror="@{failquit}">
				<arg line="testSuite.js"/>
				<arg line="@{assembly}"/>
				<arg line="@{compilation}"/>
				<arg line="@{suite}"/>
				<arg line="@{sync}"/>
			</exec>
		</sequential>
	</macrodef>
	<macrodef name="run">
        <attribute name="script"/>
        <attribute name="args"/>
		<attribute name="dir"/>
		<sequential>
			<exec osfamily="unix" executable="node" dir="@{dir}" failifexecutionfails="true" failonerror="true">
				<arg line="@{script}"/>
				<arg line="@{args}"/>
				<arg line="nodejs"/>
			</exec>
			<exec osfamily="mac" executable="node" dir="@{dir}" failifexecutionfails="true" failonerror="true">
				<arg line="@{script}"/>
				<arg line="@{args}"/>
				<arg line="nodejs"/>
			</exec>
			<exec osfamily="windows" executable="node.exe" dir="@{dir}" failifexecutionfails="true"  failonerror="true">
				<arg line="@{script}"/>
				<arg line="@{args}"/>
				<arg line="nodejs"/>
			</exec>
		</sequential>
	</macrodef>

	<target depends="assemble.dyncode.unittest" name="test.util">
		<runtests suite="util" assembly="dynamic" compilation="compiled" sync="sync" failquit="true"/>
		<runtests suite="util" assembly="dynamic" compilation="compiled" sync="async" failquit="true"/>
	</target>
	<target depends="assemble.dyncode.unittest" name="test.root">
		<runtests suite="." assembly="dynamic" compilation="compiled" sync="sync" failquit="true"/>
		<runtests suite="." assembly="dynamic" compilation="compiled" sync="async" failquit="true"/>
	</target>
	<target depends="assemble.dyncode.unittest" name="test.calendar">
		<runtests suite="calendar" assembly="dynamic" compilation="compiled" sync="sync" failquit="true"/>
		<runtests suite="calendar" assembly="dynamic" compilation="compiled" sync="async" failquit="true"/>
	</target>
	<target depends="assemble.dyncode.unittest" name="test.date">
		<runtests suite="date1" assembly="dynamic" compilation="compiled" sync="sync" failquit="false"/>
		<runtests suite="date2" assembly="dynamic" compilation="compiled" sync="sync" failquit="false"/>
		<runtests suite="date3" assembly="dynamic" compilation="compiled" sync="sync" failquit="true"/>
        <runtests suite="date1" assembly="dynamic" compilation="compiled" sync="async" failquit="false"/>
        <runtests suite="date2" assembly="dynamic" compilation="compiled" sync="async" failquit="false"/>
        <runtests suite="date3" assembly="dynamic" compilation="compiled" sync="async" failquit="true"/>
	</target>
	<target depends="assemble.dyncode.unittest" name="test.daterange">
		<runtests suite="daterange1" assembly="dynamic" compilation="compiled" sync="sync" failquit="false"/>
		<runtests suite="daterange3" assembly="dynamic" compilation="compiled" sync="sync" failquit="false"/>
		<runtests suite="daterange2" assembly="dynamic" compilation="compiled" sync="sync" failquit="true"/>
        <runtests suite="daterange1" assembly="dynamic" compilation="compiled" sync="async" failquit="false"/>
        <runtests suite="daterange3" assembly="dynamic" compilation="compiled" sync="async" failquit="false"/>
        <runtests suite="daterange2" assembly="dynamic" compilation="compiled" sync="async" failquit="true"/>
	</target>
	<target depends="assemble.dyncode.unittest" name="test.durfmt">
		<runtests suite="durfmt" assembly="dynamic" compilation="compiled" sync="sync" failquit="true"/>
	</target>
	<target depends="assemble.dyncode.unittest,assemble.dyndata.unittest,assemble.unittest" name="test.number">
		<runtests suite="number" assembly="dynamic" compilation="compiled" sync="sync" failquit="true"/>
        <runtests suite="number" assembly="dynamicdata" compilation="compiled" sync="sync" failquit="true"/>
        <runtests suite="number" assembly="assembled" compilation="compiled" sync="sync" failquit="true"/>
        <runtests suite="number" assembly="dynamic" compilation="uncompiled" sync="sync" failquit="true"/>
        <runtests suite="number" assembly="dynamicdata" compilation="uncompiled" sync="sync" failquit="true"/>
        <runtests suite="number" assembly="assembled" compilation="uncompiled" sync="sync" failquit="true"/>
        <runtests suite="number" assembly="dynamic" compilation="compiled" sync="async" failquit="true"/>
        <runtests suite="number" assembly="dynamicdata" compilation="compiled" sync="async" failquit="true"/>
        <runtests suite="number" assembly="assembled" compilation="compiled" sync="async" failquit="true"/>
        <runtests suite="number" assembly="dynamic" compilation="uncompiled" sync="async" failquit="true"/>
        <runtests suite="number" assembly="dynamicdata" compilation="uncompiled" sync="async" failquit="true"/>
        <runtests suite="number" assembly="assembled" compilation="uncompiled" sync="async" failquit="true"/>
	</target>
	<target depends="assemble.dyncode.unittest" name="test.maps">
		<runtests suite="maps" assembly="dynamic" compilation="compiled" sync="sync" failquit="true"/>
		<runtests suite="maps" assembly="dynamic" compilation="compiled" sync="async" failquit="true"/>
	</target>
	<target depends="assemble.dyncode.unittest" name="test.ctype">
		<runtests suite="ctype" assembly="dynamic" compilation="compiled" sync="sync" failquit="true"/>
		<runtests suite="ctype" assembly="dynamic" compilation="compiled" sync="async" failquit="true"/>
	</target>
	<target depends="assemble.dyncode.unittest" name="test.strings-ext">
		<runtests suite="strings-ext" assembly="dynamic" compilation="compiled" sync="sync" failquit="false"/>
		<runtests suite="strings-ext" assembly="dynamic" compilation="compiled" sync="async" failquit="false"/>
	</target>
	<target depends="assemble.dyncode.unittest" name="test.phone">
		<runtests suite="phone1" assembly="dynamic" compilation="compiled" sync="sync" failquit="false"/>
		<runtests suite="phone2" assembly="dynamic" compilation="compiled" sync="sync" failquit="false"/>
		<runtests suite="phone3" assembly="dynamic" compilation="compiled" sync="sync" failquit="true"/>
        <runtests suite="phone1" assembly="dynamic" compilation="compiled" sync="async" failquit="false"/>
        <runtests suite="phone2" assembly="dynamic" compilation="compiled" sync="async" failquit="false"/>
        <runtests suite="phone3" assembly="dynamic" compilation="compiled" sync="async" failquit="true"/>
	</target>
	<target depends="assemble.dyncode.unittest" name="test.units">
		<runtests suite="units" assembly="dynamic" compilation="compiled" sync="sync" failquit="true"/>
		<runtests suite="units" assembly="dynamic" compilation="compiled" sync="async" failquit="true"/>
	</target>
	<target depends="assemble.dyncode.unittest" name="test.name">
		<runtests suite="name" assembly="dynamic" compilation="compiled" sync="sync" failquit="true"/>
		<runtests suite="name" assembly="dynamic" compilation="compiled" sync="async" failquit="true"/>
	</target>
	<target depends="assemble.dyncode.unittest" name="test.address">
		<runtests suite="address1" assembly="dynamic" compilation="compiled" sync="sync" failquit="false"/>
		<runtests suite="address2" assembly="dynamic" compilation="compiled" sync="sync" failquit="false"/>
		<runtests suite="address3" assembly="dynamic" compilation="compiled" sync="sync" failquit="false"/>
        <runtests suite="address1" assembly="dynamic" compilation="compiled" sync="async" failquit="false"/>
        <runtests suite="address2" assembly="dynamic" compilation="compiled" sync="async" failquit="false"/>
        <runtests suite="address3" assembly="dynamic" compilation="compiled" sync="async" failquit="false"/>
	</target>
	<target depends="assemble.dyncode.unittest" name="test.collate">
		<runtests suite="collate" assembly="dynamic" compilation="compiled" sync="sync" failquit="true"/>
		<runtests suite="collate" assembly="dynamic" compilation="compiled" sync="async" failquit="true"/>
	</target>
	<macrodef name="runallsuites">
        <attribute name="assembly"/>
        <attribute name="compilation"/>
        <attribute name="failquit"/>
		<attribute name="sync"/>
		<sequential>
			<runtests suite="util" assembly="@{assembly}" compilation="@{compilation}" sync="@{sync}" failquit="@{failquit}"/>
			<runtests suite="." assembly="@{assembly}" compilation="@{compilation}" sync="@{sync}" failquit="@{failquit}"/>
			<runtests suite="calendar" assembly="@{assembly}" compilation="@{compilation}" sync="@{sync}" failquit="@{failquit}"/>
			<runtests suite="date1" assembly="@{assembly}" compilation="@{compilation}" sync="@{sync}" failquit="@{failquit}"/>
			<runtests suite="date2" assembly="@{assembly}" compilation="@{compilation}" sync="@{sync}" failquit="@{failquit}"/>
			<runtests suite="date3" assembly="@{assembly}" compilation="@{compilation}" sync="@{sync}" failquit="@{failquit}"/>
			<runtests suite="daterange1" assembly="@{assembly}" compilation="@{compilation}" sync="@{sync}" failquit="@{failquit}"/>
			<runtests suite="daterange2" assembly="@{assembly}" compilation="@{compilation}" sync="@{sync}" failquit="@{failquit}"/>
			<runtests suite="daterange3" assembly="@{assembly}" compilation="@{compilation}" sync="@{sync}" failquit="@{failquit}"/>
			<runtests suite="durfmt" assembly="@{assembly}" compilation="@{compilation}" sync="@{sync}" failquit="@{failquit}"/>
			<runtests suite="number" assembly="@{assembly}" compilation="@{compilation}" sync="@{sync}" failquit="@{failquit}"/>
			<runtests suite="maps" assembly="@{assembly}" compilation="@{compilation}" sync="@{sync}" failquit="@{failquit}"/>
			<runtests suite="ctype" assembly="@{assembly}" compilation="@{compilation}" sync="@{sync}" failquit="@{failquit}"/>
			<runtests suite="strings-ext" assembly="@{assembly}" compilation="@{compilation}" sync="@{sync}" failquit="@{failquit}"/>
			<runtests suite="phone1" assembly="@{assembly}" compilation="@{compilation}" sync="@{sync}" failquit="@{failquit}"/>
			<runtests suite="phone2" assembly="@{assembly}" compilation="@{compilation}" sync="@{sync}" failquit="@{failquit}"/>
			<runtests suite="phone3" assembly="@{assembly}" compilation="@{compilation}" sync="@{sync}" failquit="@{failquit}"/>
			<runtests suite="units" assembly="@{assembly}" compilation="@{compilation}" sync="@{sync}" failquit="@{failquit}"/>
			<runtests suite="name" assembly="@{assembly}" compilation="@{compilation}" sync="@{sync}" failquit="@{failquit}"/>
			<runtests suite="address1" assembly="@{assembly}" compilation="@{compilation}" sync="@{sync}" failquit="@{failquit}"/>
			<runtests suite="address2" assembly="@{assembly}" compilation="@{compilation}" sync="@{sync}" failquit="@{failquit}"/>
			<runtests suite="address3" assembly="@{assembly}" compilation="@{compilation}" sync="@{sync}" failquit="@{failquit}"/>
			<runtests suite="collate" assembly="@{assembly}" compilation="@{compilation}" sync="@{sync}" failquit="@{failquit}"/>
		</sequential>
	</macrodef>
	<target depends="assemble.unittest" name="test.assembled.compiled">
		<runallsuites assembly="assembled" compilation="compiled" sync="sync" failquit="true"/>
		<runallsuites assembly="assembled" compilation="compiled" sync="async" failquit="true"/>
	</target>
	<target depends="assemble.unittest" name="test.assembled.uncompiled">
		<runallsuites assembly="assembled" compilation="uncompiled" sync="sync" failquit="true"/>
		<runallsuites assembly="assembled" compilation="uncompiled" sync="async" failquit="true"/>
	</target>
	<target name="test.dynamic.uncompiled">
		<runallsuites assembly="dynamic" compilation="uncompiled" sync="sync" failquit="true"/>
		<runallsuites assembly="dynamic" compilation="uncompiled" sync="async" failquit="true"/>
	</target>
	<target name="test.dynamic.compiled">
		<runallsuites assembly="dynamic" compilation="compiled" sync="sync" failquit="false"/>
		<runallsuites assembly="dynamic" compilation="compiled" sync="async" failquit="false"/>
	</target>
	<target depends="assemble.dyndata.unittest" name="test.dynamicdata.compiled">
		<runallsuites assembly="dynamicdata" compilation="compiled" sync="sync" failquit="true"/>
		<runallsuites assembly="dynamicdata" compilation="compiled" sync="async" failquit="true"/>
	</target>
	<target depends="assemble.dyndata.unittest" name="test.dynamicdata.uncompiled">
		<runallsuites assembly="dynamicdata" compilation="uncompiled" sync="sync" failquit="true"/>
		<runallsuites assembly="dynamicdata" compilation="uncompiled" sync="async" failquit="true"/>
	</target>
	<target name="bench.core" depends="assemble.unittest,assemble.dyndata.unittest"
			description="run the benchmarking tests">
		<echo>Benchmarking the code</echo>
		<exec executable="node" dir="${build.lib}" failifexecutionfails="true" failonerror="true">
			<arg line="benchSuite.js"/>
		</exec>
	</target>
	<target name="test.core" depends="test.assembled.compiled,test.assembled.uncompiled,test.dynamicdata.compiled,test.dynamicdata.uncompiled,test.dynamic.compiled,test.dynamic.uncompiled"
			description="run the tests">
	</target>
	<target name="core.junit.report" description="Generate a report on the junit tests">
		<mkdir dir="${build.output.reports}/junit"/>
	</target>
	<!-- target name="test" depends="test.core"/ -->
	<target name="test.only" depends="test.all.nu" description="Run all tests"/>
	<target name="reports.only" depends="core.junit.report" description="Generate reports on previously run tests"/>
	<target name="reports" depends="test.only,reports.only" description="Run all tests, then generate reports on the results"/>
	<target name="test" depends="reports" description="Run all tests and build all reports"/>
	<target name="bench" depends="bench.core" description="Run all benchmark tests and build all benchmark reports"/>
	<target name="testjsdoc" description="test whether or not the jsdocs need to be rebuilt">
		<uptodate
                property="core.jsdoc.not.needed"
                targetfile="${build.jsdoc}/index.html">
			<srcfiles dir="${build.lib}" includes="**/*.js"/>
		</uptodate>
	</target>
	<target name="doc"
            depends="assemble.dyndata.full,testjsdoc"
            description="creates jsdoc for all local java files in this project"
            unless="core.jsdoc.not.needed">
		<delete dir="${build.jsdoc}"/>
		<mkdir dir="${build.jsdoc}"/>
		<echo>Executing jsdoc ... </echo>
		<java dir="${build.lib}" jar="${JSDOCDIR}/jsrun.jar" fork="true">
			<jvmarg value="-Djsdoc.dir=${JSDOCDIR}"/>
			<jvmarg value="-Djsdoc.template.dir=${JSDOCDIR}/templates/jsdoc"/>
			<jvmarg value="-Xmx1024m"/>
			<arg value="${JSDOCDIR}/app/run.js"/>
			<arg value="--directory=${build.jsdoc}"/>
			<arg value="--recurse=100"/>
			<arg value="--encoding=utf-8"/>
			<arg value="${build.output.js}/ilib-full-dyn.js"/>
		</java>
	</target>
	<target name="testinfo" description="test whether or not the localeinfo.json files need to rebuilt">
		<uptodate property="info.not.needed" targetFile="${build.locale.src}/localeinfo.stamp">
			<srcfiles dir="${build.locale.src}" includes="**/*.jf"/>
		</uptodate>
	</target>
	<target name="geninfo"
			depends="testinfo"
			description="generates the localeinfo.json files out of the *.jf files"
			unless="info.not.needed">
		<exec osfamily="unix" executable="node" dir="${build.locale.src}">
			<arg value="${build.tools.build}/mkli.js"/>
		</exec>
		<exec osfamily="mac" executable="node" dir="${build.locale.src}">
			<arg value="${build.tools.build}/mkli.js"/>
		</exec>
		<exec osfamily="windows" executable="node.exe" dir="${build.locale.src}">
			<arg value="${build.tools.build}/mkli.js"/>
		</exec>
		<touch file="${build.locale.src}/localeinfo.stamp"/>
	</target>
	<target name="testlocalejson" description="test whether or not the json files need to compressed">
		<uptodate property="json.compress.not.needed" targetFile="${build.locale.src}/jsoncompress.stamp">
			<srcfiles dir="${build.locale.src}" includes="**/*.json"/>
		</uptodate>
	</target>
	<target name="compress.locale.json"
			depends="geninfo,testlocalejson"
			description="compresses the json files"
			unless="json.compress.not.needed">
		<exec osfamily="unix" executable="node" dir="${build.locale.src}" failifexecutionfails="true" failonerror="true">
			<arg value="${build.tools.build}/jsoncompress.js"/>
			<arg value="."/>
			<arg value="${build.locale}"/>
		</exec>
		<exec osfamily="mac" executable="node" dir="${build.locale.src}">
			<arg value="${build.tools.build}/jsoncompress.js"/>
			<arg value="."/>
			<arg value="${build.locale}"/>
		</exec>
		<exec osfamily="windows" executable="node.exe" dir="${build.locale.src}">
			<arg value="${build.tools.build}/jsoncompress.js"/>
			<arg value="."/>
			<arg value="${build.locale}"/>
		</exec>
		<touch file="${build.locale.src}/jsoncompress.stamp"/>
	</target>
	<target name="test.locale.manifest" description="test whether or not the locale manifest needs to be regenerated">
		<uptodate property="locale.manifest.not.needed" targetFile="${build.locale}/ilibmanifest.json">
			<srcfiles dir="${build.locale}" includes="**/*.json"/>
		</uptodate>
	</target>
	<target name="gen.manifest.locale"
			depends="compress.locale.json,test.locale.manifest"
			description="produces the ilibmanifest.json file"
			unless="locale.manifest.not.needed">
		<exec osfamily="unix" executable="node" dir="${build.locale}">
			<arg value="${build.tools.build}/mkmf.js"/>
		</exec>
		<exec osfamily="mac" executable="node" dir="${build.locale}">
			<arg value="${build.tools.build}/mkmf.js"/>
		</exec>
		<exec osfamily="windows" executable="node.exe" dir="${build.locale}">
			<arg value="${build.tools.build}/mkmf.js"/>
		</exec>
	</target>
	<target name="teststubs" description="test whether or not the ilib-stubs.js file needs to be rebuilt">
		<uptodate
                property="stubs.not.needed"
                targetfile="${build.lib}/ilib-stubs.js">
			<srcfiles dir="${build.lib}" includes="**/*.js" excludes="output/**,ilib-*.js,**/test/**,runner.js" />
		</uptodate>
	</target>
	<target name="gen.stubs"
			depends="teststubs,assemble.dyndata.full"
			description="Generate the ilib function and class stubs file"
			unless="stubs.not.needed">
		<run dir="${build.lib}"
			script="${build.tools.build}/mkstubs.js"
			args="${build.output.js}/ilib-full-dyn.js"/>
	</target>
	<target name="testpackagejson" description="test whether or not the package.json file needs to be rebuilt">
		<uptodate
                property="package.json.not.needed"
                targetfile="${build.base}/package.json">
			<srcfiles dir="${build.base}" includes="package.json.template" />
			<srcfiles dir="${build.base}/.." includes="build.properties" />
		</uptodate>
	</target>
	<target name="update.package.json" depends="testpackagejson" unless="package.json.not.needed"
			description="Update the package.json file to insert the version number into it automatically.">
		<copy file="${build.base}/package.json.template" toFile="${build.base}/package.json">
			<filterset>
				<filter token="fullversion" value="${version}"/>
			</filterset>
		</copy>
	</target>
	<macrodef name="npm">
        <attribute name="command"/>
        <attribute name="args"/>
		<attribute name="dir"/>
		<sequential>
			<exec osfamily="unix" executable="npm" dir="@{dir}" failifexecutionfails="true" failonerror="true">
				<arg line="@{command}"/>
				<arg line="@{args}"/>
			</exec>
			<exec osfamily="mac" executable="npm" dir="@{dir}" failifexecutionfails="true" failonerror="true">
				<arg line="@{command}"/>
				<arg line="@{args}"/>
			</exec>
			<exec osfamily="windows" executable="npm.exe" dir="@{dir}" failifexecutionfails="true"  failonerror="true">
				<arg line="@{command}"/>
				<arg line="@{args}"/>
			</exec>
		</sequential>
	</macrodef>
	<target name="npm.set.parseable.true">
		<npm command="config" args="set parseable true" dir="${build.base}"/>
	</target>
	<target name="testuglifyinstalled" depends="npm.set.parseable.true">
    	<echo>Testing if uglify is already installed.</echo>
    	<exec osfamily="unix" outputproperty="uglify.location" resultproperty="uglify.result" errorproperty="uglify.error" executable="sh" dir="${build.base}" failifexecutionfails="true">
    		<arg value="-c"/>
			<arg value="npm list uglify-js | tail -1"/>
		</exec>
		<exec osfamily="mac" outputproperty="uglify.location" resultproperty="uglify.result" errorproperty="uglify.error" executable="sh" dir="${build.base}" failifexecutionfails="true">
    		<arg value="-c"/>
			<arg value="npm list uglify-js | tail -1"/>
		</exec>
		<exec osfamily="windows" outputproperty="uglify.location" resultproperty="uglify.result" errorproperty="uglify.error" executable="cmd.exe" dir="${build.base}" failifexecutionfails="true">
    		<arg value="/c"/>
			<arg value="npm list uglify-js | tail -1"/>
		</exec>
    	<condition property="uglify.installed">
    	    <equals arg1="${uglify.result}" arg2="0"/>
    	</condition>
    	<echo>Uglify installed: ${uglify.installed} at location ${uglify.location}</echo>
    </target>
	<target name="install.uglify" unless="uglify.installed" depends="testuglifyinstalled">
		<echo>Installing uglify</echo>
		<npm command="install" args="uglify-js" dir="${build.base}"/>
		<echo>Done.</echo>
	</target>
	<target name="location.trireme">
    	<exec osfamily="unix" outputproperty="trireme.location" resultproperty="trireme.result" errorproperty="trireme.error" executable="sh" dir="${build.base}" failifexecutionfails="true">
    		<arg value="-c"/>
			<arg value="npm list trireme | tail -1"/>
		</exec>
		<exec osfamily="mac" outputproperty="trireme.location" resultproperty="trireme.result" errorproperty="trireme.error" executable="sh" dir="${build.base}" failifexecutionfails="true">
    		<arg value="-c"/>
			<arg value="npm list trireme | tail -1"/>
		</exec>
		<exec osfamily="windows" outputproperty="trireme.location" resultproperty="trireme.result" errorproperty="trireme.error" executable="cmd.exe" dir="${build.base}" failifexecutionfails="true">
    		<arg value="/c"/>
			<arg value="npm list trireme | tail -1"/>
		</exec>
	</target>
	<target name="testtriremeinstalled" depends="npm.set.parseable.true,location.trireme">
    	<condition property="trireme.installed">
    		<and>
    	    	<equals arg1="${trireme.result}" arg2="0"/>
    			<length string="${trireme.location}" trim="true" when="greater" length="0" />
    	    </and>
    	</condition>
    	<echo>trireme installed: ${trireme.installed} at location ${trireme.location}</echo>
    </target>
	<target name="install.trireme" unless="trireme.installed" depends="testtriremeinstalled">
		<echo>Installing trireme</echo>
		<npm command="install" args="trireme" dir="${build.base}"/>
		<echo>Done.</echo>
	</target>
	<macrodef name="runtests.rhino">
		<attribute name="assembly"/>
        <attribute name="compilation"/>
        <attribute name="suite"/>
		<attribute name="failquit"/>
		<sequential>
			<java	dir="${build.test}"
					classname="io.apigee.trireme.shell.Main"
					fork="true"
					maxmemory="4096m"
				 	failifexecutionfails="@{failquit}">
				<jvmarg value="-XX:MaxPermSize=96m"/>
				<jvmarg value="-Xms256m"/>
				<jvmarg value="-Xmx2048m"/>
				<arg value="./testSuite.js"/>
				<arg line="@{assembly}"/>
				<arg line="@{compilation}"/>
				<arg line="@{suite}"/>
				<classpath>
					<pathelement path="${trireme.location}/lib/*"/>
					<pathelement path="${trireme.location}/lib"/>
					<pathelement path="${java.class.path}"/>
				</classpath>
			</java>
		</sequential>
	</macrodef>
	<macrodef name="runallsuites.rhino">
        <attribute name="assembly"/>
        <attribute name="compilation"/>
        <attribute name="failquit"/>
		<sequential>
			<runtests.rhino suite="util" assembly="@{assembly}" compilation="@{compilation}" failquit="@{failquit}"/>
			<runtests.rhino suite="." assembly="@{assembly}" compilation="@{compilation}" failquit="@{failquit}"/>
			<runtests.rhino suite="calendar" assembly="@{assembly}" compilation="@{compilation}" failquit="@{failquit}"/>
			<runtests.rhino suite="date1" assembly="@{assembly}" compilation="@{compilation}" failquit="@{failquit}"/>
			<runtests.rhino suite="date2" assembly="@{assembly}" compilation="@{compilation}" failquit="@{failquit}"/>
			<runtests.rhino suite="date3" assembly="@{assembly}" compilation="@{compilation}" failquit="@{failquit}"/>
			<runtests.rhino suite="daterange1" assembly="@{assembly}" compilation="@{compilation}" failquit="@{failquit}"/>
			<runtests.rhino suite="daterange2" assembly="@{assembly}" compilation="@{compilation}" failquit="@{failquit}"/>
			<runtests.rhino suite="daterange3" assembly="@{assembly}" compilation="@{compilation}" failquit="@{failquit}"/>
			<runtests.rhino suite="durfmt" assembly="@{assembly}" compilation="@{compilation}" failquit="@{failquit}"/>
			<runtests.rhino suite="number" assembly="@{assembly}" compilation="@{compilation}" failquit="@{failquit}"/>
			<runtests.rhino suite="maps" assembly="@{assembly}" compilation="@{compilation}" failquit="@{failquit}"/>
			<runtests.rhino suite="ctype" assembly="@{assembly}" compilation="@{compilation}" failquit="@{failquit}"/>
			<runtests.rhino suite="strings-ext" assembly="@{assembly}" compilation="@{compilation}" failquit="@{failquit}"/>
			<runtests.rhino suite="phone1" assembly="@{assembly}" compilation="@{compilation}" failquit="@{failquit}"/>
			<runtests.rhino suite="phone2" assembly="@{assembly}" compilation="@{compilation}" failquit="@{failquit}"/>
			<runtests.rhino suite="phone3" assembly="@{assembly}" compilation="@{compilation}" failquit="@{failquit}"/>
			<runtests.rhino suite="units" assembly="@{assembly}" compilation="@{compilation}" failquit="@{failquit}"/>
			<runtests.rhino suite="name" assembly="@{assembly}" compilation="@{compilation}" failquit="@{failquit}"/>
			<runtests.rhino suite="address1" assembly="@{assembly}" compilation="@{compilation}" failquit="@{failquit}"/>
			<runtests.rhino suite="address2" assembly="@{assembly}" compilation="@{compilation}" failquit="@{failquit}"/>
			<runtests.rhino suite="address3" assembly="@{assembly}" compilation="@{compilation}" failquit="@{failquit}"/>
			<runtests.rhino suite="collate" assembly="@{assembly}" compilation="@{compilation}" failquit="@{failquit}"/>
		</sequential>
	</macrodef>
	<target name="test.assembled.compiled.rhino" depends="assemble.unittest,location.trireme">
		<runallsuites.rhino assembly="assembled" compilation="compiled" failquit="true"/>
	</target>
	<target name="test.assembled.uncompiled.rhino" depends="assemble.unittest,location.trireme">
		<runallsuites.rhino assembly="assembled" compilation="uncompiled" failquit="true"/>
	</target>
	<target name="test.dynamic.uncompiled.rhino" depends="location.trireme,prepare,gen.manifest.locale">
		<runallsuites.rhino assembly="dynamic" compilation="uncompiled" failquit="true"/>
	</target>
	<target name="test.dynamic.compiled.rhino" depends="location.trireme,prepare,gen.manifest.locale">
		<runallsuites.rhino assembly="dynamic" compilation="compiled" failquit="true"/>
	</target>
	<target name="test.dynamicdata.compiled.rhino" depends="assemble.dyndata.unittest,location.trireme">
		<runallsuites.rhino assembly="dynamicdata" compilation="compiled" failquit="true"/>
	</target>
	<target name="test.dynamicdata.uncompiled.rhino" depends="assemble.dyndata.unittest,location.trireme">
		<runallsuites.rhino assembly="dynamicdata" compilation="uncompiled" failquit="true"/>
	</target>
	<target name="test.calendar.rhino" depends="location.trireme,gen.manifest.locale">
		<runtests.rhino suite="calendar" assembly="dynamic" compilation="uncompiled" failquit="true"/>
	</target>
	<target name="test.units.rhino" depends="location.trireme,gen.manifest.locale">
		<runtests.rhino suite="units" assembly="dynamic" compilation="uncompiled" failquit="true"/>
	</target>
	<target name="test.rhino" depends="test.assembled.compiled.rhino,test.assembled.uncompiled.rhino,test.dynamic.uncompiled.rhino,test.dynamic.compiled.rhino,test.dynamicdata.compiled.rhino,test.dynamicdata.uncompiled.rhino">
	</target>

	<target name="test.remote" depends="prepare,assemble.unittest" description="Run a remote server to test ilib in remote browsers">
	    <exec osfamily="unix" executable="node" dir="${build.base}" failifexecutionfails="true">
			<arg value="../node_modules/http-server/bin/http-server"/>
			<arg value="-p"/>
			<arg value="9090"/>
		</exec>
		<exec osfamily="windows" executable="node.exe" dir="${build.base}" failifexecutionfails="true">
			<arg value="../node_modules/http-server/bin/http-server"/>
		</exec>
	</target>
</project>
