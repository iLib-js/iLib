<?xml version="1.0" encoding="UTF-8"?>
<!--
build.xml - build the javascript parts
Copyright Â© 2012-2020, JEDLSoft
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<!-- ======================================================================= -->
<!-- Main build file for the ilib js bits            -->
<!-- ======================================================================= -->
<project name="ilib" default="all">
	<!-- =================================================================== -->
	<!-- properties                                                          -->
	<!-- =================================================================== -->
	<!-- Give user a chance to override properties without editing this file -->
	<!-- (and without typing -D each time it compiles it)                    -->
	<property file="../build.properties"/>
	<property file="build.properties"/>
	<property environment="env"/>
	
	<!-- Properties that can be overridden -->
	<!-- directories -->
	<property name="build.base"						value="${basedir}"/>
	<property name="build.dist"						value="${build.base}/../dist"/>
	<property name="build.export"					value="${build.base}/../export"/>
	<property name="build.docs"                     value="${build.base}/../docs"/>
	<property name="build.demo"						value="${build.docs}/demo"/>
	<property name="build.apidocs"                  value="${build.docs}/api/jsdoc"/>
	<property name="build.tools"					value="${build.base}/../tools"/>
	<property name="build.tools.qmlizer"			value="${build.base}/../tools/qmlizer"/>
	<property name="build.tools.build"				value="${build.base}/../tools/build"/>
	<property name="build.bin"						value="${build.base}/bin"/>
	<property name="build.lib"						value="${build.base}/lib"/>
	<property name="build.output"					value="${build.base}/output"/>
	<property name="build.output.js"				value="${build.output}/js"/>
	<property name="build.output.dyncode"			value="${build.output}/dyncode"/>
	<property name="build.output.test"				value="${build.output}/test"/>
	<property name="build.jsdoc"					value="${build.output}/jsdoc"/>
	<property name="build.data"						value="${build.base}/data"/>
	<property name="build.test"						value="${build.base}/test"/>
	<property name="build.locale.src"				value="${build.data}/locale"/>
	<property name="build.locale"					value="${build.base}/locale"/>
	<property name="build.config"					value="config"/>
	<property name="log4j.config.file"				value="${build.config}/log4j.properties"/>
	<property name="build.bin"						value="${build.base}/../bin"/>
    <property name="nm.bin"                         value="${build.base}/../node_modules/.bin"/>
	<property name="jar.ilib"					    value="ilib.jar"/>
	<property name="locales.default"                value="en-AU,en-CA,en-GB,en-IN,en-NG,en-PH,en-PK,en-SG,en-US,en-ZA,de-DE,fr-CA,fr-FR,es-AR,es-ES,es-MX,id-ID,it-IT,ja-JP,ko-KR,pt-BR,ru-RU,tr-TR,vi-VN,zxx-XX,zh-Hans-CN,zh-Hant-HK,zh-Hant-TW,zh-Hans-SG"/>
    <property name="locales.unittest"               value="aa-DJ,af-NA,agq-CM,ak-GH,am-ET,ar-AE,ar-BH,ar-DJ,ar-DZ,ar-EG,ar-IQ,ar-JO,ar-KW,ar-LB,ar-LY,ar-MA,ar-MR,ar-OM,ar-QA,ar-SA,ar-SD,ar-SY,ar-TN,ar-YE,asa-TZ,as-IN,az-Latn-AZ,bas-CM,be-BY,bem-ZM,bg-BG,bh-IN,bm-ML,bn-IN,br-FR,bs-BS,bs-Cyrl-BA,bs-Latn-BA,bs-ME,ca-FR,cic-US,cop-EG,cs-CZ,da-DK,de-AT,de-CH,de-DE,el-GR,en-AM,en-AU,en-CA,en-ET,en-GB,en-GH,en-GM,en-HK,en-IE,en-IN,en-IS,en-KE,en-LK,en-LR,en-MP,en-MW,en-MY,en-NG,en-NZ,en-PA,en-PH,en-PK,en-PR,en-RW,en-SD,en-SG,en-SL,en-TZ,en-UG,en-US,en-ZA,en-ZM,es-AR,es-BO,es-CL,es-CO,es-CR,es-DO,es-EC,es-ES,es-GQ,es-GT,es-HN,es-MX,es-NI,es-PA,es-PE,es-PH,es-PR,es-PY,es-SV,es-US,es-UY,es-VE,et-EE,eu-ES,fa-AF,fa-IR,ff-SN,fi-FI,fj-FJ,fo-FO,fr-AD,fr-BE,fr-BF,fr-BJ,fr-CA,fr-CD,fr-CF,fr-CG,fr-CH,fr-CI,fr-CM,fr-DJ,fr-DZ,fr-FR,fr-GA,fr-GN,fr-LB,fr-LU,fr-MG,fr-ML,fr-RW,fr-SN,fr-TG,fr-YT,ga-IE,gl-ES,gu-IN,ha-Latn-NG,he-IL,hi-IN,hr-HR,hr-ME,hu-HU,hy-AZ,hy-AM,id-ID,id-MY,it-CH,it-IT,is-IS,it-SM,ja-JP,ka-GE,ka-IR,kk-Cyrl-KZ,km-KH,kn-IN,ko-KR,ks-Arab-IN,ku-Arab-IQ,ku-Arab-IR,ku-IR,ky-KG,lg-UG,ln-CF,lo-LA,lt-LT,lv-LV,fr-Latn-MA,mi-CK,mk-MK,ml-IN,mm-MM,mn-CN,mn-Cyrl-MN,mr-IN,ms-BN,ms-MY,mus-US,my-MM,ne-NP,nl-BE,nl-NL,nb-NO,nn-NO,no-NO,no-SJ,om-ET,or-IN,os-RU,pa-Arab,pa-IN,pa-Arab-PK,pl-PL,ps-AF,pt-AO,pt-BR,pt-CV,pt-GW,pt-GQ,pt-MO,pt-MZ,pt-PT,pt-ST,pt-TL,ro-RO,ro-RS,ru-GE,ru-KG,ru-KZ,ru-RU,ru-TM,shi-Tfng-MA,si-LK,sk-SK,sl-SI,sl-SL,so-ET,so-SO,sq-AL,sq-ME,sq-MK,sr-Cyrl-BA,sr-Latn-BA,sr-Latn-RS,sr-Latn-ME,sr-RS,sr-Latn-RS,ss-SZ,ss-ZA,st-LS,sv-FI,sv-SE,sw-KE,sw-UG,ta-IN,ta-LK,ta-MY,ta-SG,te-IN,th-TH,tr-TR,tr-CY,uk-UA,ur-IN,ur-PK,uz-AF,uz-Arab-AF,uz-Cyrl-UZ,uz-Latn-UZ,uz-UZ,vai-Latn-LR,vi-VN,zh-Hans-CN,zh-Hant-HK,zh-Hans-HK,zh-Hans-MY,zh-Hant-TW,zh-Hans-MO,zh-Hant-MO,zh-Hans-SG,zh-Hant-US,zu-ZA,zxx-Cyrl-XX,zxx-Hans-XX,zxx-Hebr-XX,zxx-XX,zxx-XA,zxx-XB"/>
	<property name="locales.demo"                   value="aa-DJ,af-NA,af-ZA,agq-CM,ak-GH,am-ET,ar-AE,ar-BH,ar-DJ,ar-DZ,ar-EG,ar-IQ,ar-JO,ar-KW,ar-LB,ar-LY,ar-MA,ar-MR,ar-OM,ar-QA,ar-SA,ar-SD,ar-SY,ar-TN,ar-YE,as-IN,asa-TZ,az-AZ,bas-CM,be-BY,bem-ZM,bg-BG,bh-IN,bm-ML,bn-IN,br-FR,bs-Cyrl-BA,bs-Latn-BA,bs-ME,ca-FR,cop-EG,cs-CZ,da-DK,de-AT,de-CH,de-DE,el-GR,en-AU,en-CA,en-ET,en-GB,en-GH,en-GM,en-HK,en-IE,en-IN,en-KE,en-LK,en-LR,en-MW,en-MY,en-NG,en-NZ,en-PH,en-PK,en-PR,en-RW,en-SG,en-SL,en-TZ,en-UG,en-US,en-ZA,en-ZM,es-AR,es-CO,es-CR,es-DO,es-EC,es-ES,es-GQ,es-GT,es-HN,es-MX,es-PH,es-SV,es-UY,es-VE,et-EE,eu-ES,fa-AF,fa-IR,ff-SN,fi-FI,fj-FJ,fr-AD,fr-BE,fr-BF,fr-BJ,fr-CA,fr-CD,fr-CF,fr-CG,fr-CH,fr-CI,fr-CM,fr-DJ,fr-DZ,fr-FR,fr-GA,fr-GN,fr-LB,fr-LU,fr-MG,fr-ML,fr-RW,fr-SN,fr-TG,fr-YT,ga-IE,gl-ES,gu-IN,ha-Latn-NG,he-IL,hi-IN,hr-HR,hr-ME,hu-HU,hy-AM,hy-AZ,id-ID,id-MY,it-CH,it-IT,is-IS,it-SM,ja-JP,ka-GE,ka-IR,kk-Cyrl-KZ,km-KH,kn-IN,ko-KR,ks-Arab-IN,ku-IR,ky-KG,lg-UG,ln-CF,lo-LA,lt-LT,lv-LV,mi-CK,mk-MK,ml-IN,mn-CN,mr-IN,ms-BN,ms-MY,my-MM,nb-NO,ne-IN,ne-NP,nl-BE,nl-CW,nl-GF,nl-NL,nl-SR,no-BV,no-NO,no-SJ,om-ET,or-IN,os-RU,pa-Arab-PK,pl-PL,pt-AO,pt-BR,pt-CV,pt-GW,pt-MO,pt-MZ,pt-PT,pt-ST,pt-TL,ro-RO,ro-RS,ru-KG,ru-KZ,ru-RU,ru-TM,si-LK,sk-SK,sl-SI,so-ET,so-SO,sq-AL,sq-ME,sq-MK,sr-Cyrl-BA,sr-Latn-BA,sr-Latn-ME,sr-Latn-RS,sr-RS,ss-SZ,ss-ZA,st-LS,sv-FI,sv-SE,sw-UG,ta-LK,ta-MY,ta-SG,te-IN,th-TH,tr-TR,tr-CY,uk-UA,ur-IN,ur-PK,uz-AF,uz-Arab-AF,uz-Cyrl-UZ,uz-Latn-UZ,vai-Latn-LR,vi-VN,zh-Hans-CN,zh-Hans-MO,zh-Hans-MY,zh-Hans-SG,zh-Hant-HK,zh-Hant-TW,zh-Hant-US,zu-ZA,zxx-Cyrl-XX,zxx-Hans-XX,zxx-Hebr-XX,zxx-XX"/>
    <property name="keep.these.comments"            value="/(\!data|\!loadLocaleData|\!defineLocaleData|\!macro|eslint-)/"/>

	<!-- =================================================================== -->
	<!-- Class paths                                                         -->
	<!-- =================================================================== -->
	<path id="project.class.path.base">
		<fileset dir="${build.lib}">
			<include name="**/*.jar"/>
		</fileset>
		<pathelement path="${build.config}"/>
	</path>
	<path id="project.class.path.release">
		<pathelement path="${build.classes.release}"/>
		<path refid="project.class.path.base"/>
	</path>
	<path id="project.class.path.debug">
		<pathelement path="${build.classes.debug}"/>
		<path refid="project.class.path.base"/>
	</path>
	<path id="project.classpath.junit">
		<path refid="project.class.path.debug"/>
	</path>
	<path id="project.classpath.jsa">
		<fileset dir="../java/output/release">
			<include name="*.jar"/>
		</fileset>
		<fileset dir="../java/lib">
			<include name="*.jar"/>
		</fileset>
		<pathelement path="../java/config"/>
	</path>
	<taskdef name="jscomp"
		classname="com.google.javascript.jscomp.ant.CompileTask"
		classpath="${CLOSURECOMP}/compiler.jar"/>
	<!-- =================================================================== -->
	<!-- Implement the standard targets                                      -->
	<!-- =================================================================== -->
	<target name="all" depends="dist,doc,demo" description="Build everything. This is the target that the build should run."/>

	<target name="clean" description="Remove all generated files to start from scratch">
		<delete dir="${build.classes}"/>
		<delete dir="${build.output}"/>
		<delete>
			<fileset dir="${build.locale.src}">
			    <include name="**/localeinfo.json"/>
			</fileset>
		</delete>
		<delete file="${build.locale.src}/localeinfo.stamp"/>
		<delete file="${build.locale.src}/jsoncompress.stamp"/>
		<delete file="${build.demo}/demo.tgz"/>
		<delete dir="${build.demo}/scripts/assets"/>
		<delete file="${build.demo}/scripts/ilib-demo.js"/>
		<delete file="${build.demo}/scripts/ilib-include.js"/>
		<delete file="${build.demo}/scripts/ilib.js"/>
		<delete file="${build.demo}/scripts/webpack.config.js"/>
		<delete file="${build.base}/package.json"/>
		<delete file="${build.test}/nodeunit/nodeunit-qml.jsc"/>
		<delete file="${build.lib}/ilib-qt.jsc"/>
		<delete dir="${build.locale}"/>
		<delete dir="${build.apidocs}"/>
	</target>
	<target name="prepare" depends="update.package.json" description="Prepare all directories that are needed before the project can be built">
		<mkdir dir="${build.output.js}"/>
		<mkdir dir="${build.output.dyncode}"/>
		<mkdir dir="${build.output.test}"/>
		
	</target>
	<!-- =================================================================== -->
	<!-- Create the core jar file                                            -->
	<!-- =================================================================== -->
	<macrodef name="runassemble">
        <attribute name="assembly" default="assembled"/>
        <attribute name="size"/>
        <attribute name="compilation" default="uncompiled"/>
        <attribute name="locales" default="${locales.default}"/>
        <attribute name="target" default="web"/>
        <attribute name="mode" default="production"/>
		<sequential>
		    <echo>executing webpack</echo>
			<exec osfamily="unix" executable="webpack-cli" dir="${build.base}" failifexecutionfails="@{failquit}" failonerror="@{failquit}">
				<env key="NODE_OPTIONS" value="--max-old-space-size=3072"/>
				<arg value="--env.assembly=@{assembly}"/>
				<arg value="--env.size=@{size}"/>
				<arg value="--env.compilation=@{compilation}"/>
				<arg value="--env.locales=@{locales}"/>
				<arg value="--env.target=@{target}"/>
				<arg value="--env.ilibRoot=${build.base}"/>
				<arg value="--env.tempDir=${build.output}"/>
                <arg value="--mode=@{mode}"/>
			</exec>
			<exec osfamily="windows" executable="webpack-cli.bat" dir="${build.base}" failifexecutionfails="@{failquit}"  failonerror="@{failquit}">
				<env key="NODE_OPTIONS" value="--max-old-space-size=3072"/>
				<arg value="--env.assembly=@{assembly}"/>
				<arg value="--env.size=@{size}"/>
				<arg value="--env.compilation=@{compilation}"/>
				<arg value="--env.locales=@{locales}"/>
                <arg value="--env.target=@{target}"/>
                <arg value="--env.ilibRoot=${build.base}"/>
                <arg value="--env.tempDir=${build.output}"/>
                <arg value="--mode=@{mode}"/>
			</exec>
		</sequential>
	</macrodef>
	<target name="testilib.core" description="test whether or not the ilib-core single file needs to be rebuilt">
		<uptodate property="core.ilib.core.not.needed" targetfile="${build.output.js}/core-assembled-uncompiled-web/ilib-core.js">
			<srcfiles dir="${build.lib}" includes="**/*.js" excludes="ilib-*.js,**/test/**,runner.js,*Loader.js" />
			<srcfiles dir="${build.lib}" includes="metafiles/ilib-core-webpack.js"/>
			<srcfiles dir="${build.locale}" includes="**/*.json" />
		</uptodate>
	</target>
	<target name="assemble.core.assembled" depends="prepare,gen.manifest.locale,testilib.core" unless="core.ilib.core.not.needed" description="assembles the js files into a single file in the right order to satisfy dependencies">
		<runassemble size="core"/>
		<runassemble size="core" compilation="compiled"/>
	</target>
    <target name="assemble.core.dyndata" depends="prepare,gen.manifest.locale,testilib.core" unless="core.ilib.core.not.needed" description="assembles the js files into a single file in the right order to satisfy dependencies">
        <runassemble assembly="dynamicdata" size="core"/>
        <runassemble assembly="dynamicdata" size="core" compilation="compiled"/>
    </target>
    <target name="assemble.core" depends="assemble.core.assembled,assemble.core.dyndata"/>

	<target name="closure">
		<jscomp compilationlevel="simple"
			warning="verbose"
			debug="true"
			output="${build.output.js}/ilib-core-closure.js"
			description="Use the google closure compiler to check for code problems"
			encoding="utf-8">
			<externs dir="${build.lib}">
				<file name="externs.js"/>
			</externs>
			<sources dir="${build.output.js}">
				<file name="ilib-core.js"/>
			</sources>
		</jscomp>
	</target>

	<target name="testilib.standard" description="test whether or not the ilib-standard single file needs to be rebuilt">
		<uptodate property="core.ilib.standard.not.needed" targetfile="${build.output.js}/standard-assembled-uncompiled-web/ilib-standard.js">
			<srcfiles dir="${build.lib}" includes="**/*.js" excludes="ilib-*.js,**/test/**,runner.js,*Loader.js" />
			<srcfiles dir="${build.lib}" includes="metafiles/ilib-standard-webpack.js"/>
			<srcfiles dir="${build.locale}" includes="**/*.json" />
		</uptodate>
	</target>
	<target name="assemble.standard.assembled" depends="prepare,gen.manifest.locale,testilib.standard" unless="core.ilib.standard.not.needed" description="assembles the js files into a single file in the right order to satisfy dependencies">
		<runassemble size="standard"/>
		<runassemble size="standard" compilation="compiled"/>
	</target>
    <target name="assemble.standard.dyndata" depends="prepare,gen.manifest.locale,testilib.standard" unless="core.ilib.standard.not.needed" description="assembles the js files into a single file in the right order to satisfy dependencies">
        <runassemble assembly="dynamicdata" size="standard"/>
        <runassemble assembly="dynamicdata" size="standard" compilation="compiled"/>
    </target>
	<target name="assemble.standard" depends="assemble.standard.assembled,assemble.standard.dyndata"/>

	<target name="testilib.full" description="test whether or not the ilib-full single file needs to be rebuilt">
		<uptodate property="core.ilib.full.not.needed" targetfile="${build.output.js}/full-assembled-uncompiled-web/ilib-full.js">
			<srcfiles dir="${build.lib}" includes="**/*.js" excludes="ilib-*.js,**/test/**,runner.js,*Loader.js" />
			<srcfiles dir="${build.lib}" includes="metafiles/ilib-full-webpack.js"/>
			<srcfiles dir="${build.locale}" includes="**/*.json" />
		</uptodate>
	</target>
	<target name="assemble.full.assembled" depends="prepare,gen.manifest.locale,testilib.full" unless="core.ilib.full.not.needed" description="assembles the js files into a single file in the right order to satisfy dependencies">
		<runassemble size="full"/>
		<runassemble size="full" compilation="compiled"/>
	</target>
	<target name="assemble.full.dyndata" depends="prepare,gen.manifest.locale,testilib.full" unless="core.ilib.full.not.needed" description="assembles the js files into a single file in the right order to satisfy dependencies">
        <runassemble assembly="dynamicdata" size="full"/>
        <runassemble assembly="dynamicdata" size="full" compilation="compiled"/>
    </target>
	<target name="assemble.full" depends="assemble.full.assembled,assemble.full.dyndata"/>

	<target name="testilibut" description="test whether or not the ilib-ut single file needs to be rebuilt">
		<uptodate property="ilib-ut.not.needed" targetfile="${build.output.js}/ut-assembled-uncompiled-web/ilib-ut.js">
			<srcfiles dir="${build.lib}" includes="**/*.js" excludes="ilib-*.js,**/test/**,runner.js,*Loader.js" />
			<srcfiles dir="${build.lib}" includes="metafiles/ilib-ut-webpack.js,WebpackLoader.js"/>
			<srcfiles dir="${build.locale}" includes="**/*.json" />
		</uptodate>
	</target>
    <target name="assemble.unittest.assembled" depends="prepare,gen.manifest.locale,update.package.json,testilibut" unless="ilib-ut.not.needed" description="assembles only the locales needed for the unit tests">
        <runassemble size="ut" locales="${locales.unittest}" mode="development"/>
        <runassemble size="ut" compilation="compiled" locales="${locales.unittest}" mode="development"/>
    </target>
    <target name="testilibut.dyndata" description="test whether or not the ilib-ut single file needs to be rebuilt">
        <uptodate property="ilib-ut.dyndata.not.needed" targetfile="${build.output.js}/ut-dynamicdata-uncompiled-web/ilib-ut-dyn.js">
            <srcfiles dir="${build.lib}" includes="**/*.js" excludes="ilib-*.js,**/test/**,runner.js,*Loader.js" />
            <srcfiles dir="${build.lib}" includes="metafiles/ilib-ut-webpack.js,WebpackLoader.js"/>
            <srcfiles dir="${build.locale}" includes="**/*.json" />
        </uptodate>
    </target>
    <target name="assemble.unittest.dyndata" depends="prepare,gen.manifest.locale,update.package.json,testilibut.dyndata" unless="ilib-ut.dyndata.not.needed" description="assembles only the locales needed for the unit tests">
        <runassemble assembly="dynamicdata" size="ut" locales="${locales.unittest}" mode="development"/>
        <runassemble assembly="dynamicdata" size="ut" compilation="compiled" locales="${locales.unittest}" mode="development"/>
    </target>

   <target name="testilibut.node" description="test whether or not the ilib-ut single file needs to be rebuilt">
        <uptodate property="ilib-ut.node.not.needed" targetfile="${build.output.js}/ut-assembled-uncompiled-node/ilib-ut.js">
            <srcfiles dir="${build.lib}" includes="**/*.js" excludes="ilib-*.js,**/test/**,runner.js,*Loader.js" />
            <srcfiles dir="${build.lib}" includes="metafiles/ilib-ut-webpack.js,WebpackLoader.js"/>
            <srcfiles dir="${build.locale}" includes="**/*.json" />
        </uptodate>
    </target>
	<target name="assemble.unittest.assembled.node" depends="prepare,gen.manifest.locale,update.package.json,testilibut.node" unless="ilib-ut.node.not.needed" description="assembles only the locales needed for the unit tests">
        <runassemble size="ut" locales="${locales.unittest}" target="node" mode="development"/>
        <runassemble size="ut" locales="${locales.unittest}" compilation="compiled" target="node" mode="development"/>
    </target>
   <target name="testilibut.dyndata.node" description="test whether or not the ilib-ut single file needs to be rebuilt">
        <uptodate property="ilib-ut.dyndata.node.not.needed" targetfile="${build.output.js}/ut-dynamicdata-uncompiled-node/ilib-ut-dyn.js">
            <srcfiles dir="${build.lib}" includes="**/*.js" excludes="ilib-*.js,**/test/**,runner.js,*Loader.js" />
            <srcfiles dir="${build.lib}" includes="metafiles/ilib-ut-webpack.js,WebpackLoader.js"/>
            <srcfiles dir="${build.locale}" includes="**/*.json" />
        </uptodate>
    </target>
    <target name="assemble.unittest.dyndata.node" depends="prepare,gen.manifest.locale,update.package.json,testilibut.dyndata.node" unless="ilib-ut.dyndata.node.not.needed" description="assembles only the locales needed for the unit tests">
        <runassemble assembly="dynamicdata" size="ut" locales="${locales.unittest}" target="node" mode="development"/>
        <runassemble assembly="dynamicdata" size="ut" compilation="compiled" locales="${locales.unittest}" target="node" mode="development"/>
    </target>
    <target name="assemble.unittest" depends="assemble.unittest.assembled,assemble.unittest.dyndata,assemble.unittest.assembled.node,assemble.unittest.dyndata.node"/>

    <target name="assemble.unittest.dyncode" depends="prepare,gen.manifest.locale" description="prepares dynamic load code for the unit tests"/>

	<target name="testilibdemo" description="test whether or not the ilib-demo file needs to be rebuilt">
		<uptodate property="ilib-demo.not.needed" targetfile="${build.output.js}/demo-dynamicdata-uncompiled-web/ilib-demo-dyn.js">
			<srcfiles dir="${build.lib}" includes="**/*.js" excludes="ilib-*.js,**/test/**,runner.js,*Loader.js"/>
			<srcfiles dir="${build.lib}" includes="metafiles/ilib-demo-webpack.js"/>
			<srcfiles dir="${build.locale}" includes="**/*.json"/>
		</uptodate>
	</target>
	<target name="assemble.demo.assembled" depends="prepare,gen.manifest.locale,testilibdemo" unless="ilib-demo.not.needed" description="assembles the js files into a single file for the demo">
		<runassemble size="demo" locales="${locales.demo}"/>
		<runassemble size="demo" compilation="compiled" locales="${locales.demo}"/>
	</target>
    <target name="assemble.demo.dyndata" depends="prepare,gen.manifest.locale,testilibdemo" unless="ilib-demo.not.needed" description="assembles the js files into a single file for the demo">
        <runassemble assembly="dynamicdata" size="demo" locales="${locales.demo}"/>
        <runassemble assembly="dynamicdata" size="demo" compilation="compiled" locales="${locales.demo}"/>
    </target>
	<target name="assemble.demo" depends="assemble.demo.assembled,assemble.demo.dyndata"/>

	<target name="assemble.dynamic" depends="prepare,gen.manifest.locale" description="compresses/minifies the dynamic load code files">
		<!-- handle ilib.js as a special case so we can replace the version number in it -->
		<copy file="${build.lib}/ilib.js" toFile="${build.output.js}/ilib.js" verbose="true"/>
		<replace token="// !macro ilibVersion" value='"${version}"' preserveLastModified="true">
		    <fileset dir="${build.output.js}" includes="ilib.js"/>
		</replace>
		<exec osfamily="unix" executable="uglifyjs" dir="${build.base}" failifexecutionfails="true">
            <env key="PATH" path="${env.PATH}:${nm.bin}"/>
			<arg value="${build.output.js}/ilib.js"/>
            <arg value="--comments"/>
            <arg value="${keep.these.comments}"/>
			<arg value="-o"/>
			<arg value="${build.output.dyncode}/ilib.js"/>
			<arg value="--no-mangle-functions"/>
            <arg value="-c"/>
			<arg value="-v"/>
		</exec>
		<exec osfamily="windows" executable="uglifyjs" dir="${build.base}" failifexecutionfails="true">
            <env key="PATH" path="${env.PATH}:${nm.bin}"/>
			<arg value="${build.output.js}/ilib.js"/>
            <arg value="--comments"/>
            <arg value="${keep.these.comments}"/>
            <arg value="-o"/>
			<arg value="${build.output.dyncode}/ilib.js"/>
			<arg value="--no-mangle-functions"/>
            <arg value="-c"/>
			<arg value="-v"/>
		</exec>
		<exec osfamily="unix" executable="node" dir="${build.base}" failifexecutionfails="true">
            <env key="PATH" path="${env.PATH}:${nm.bin}"/>
			<arg value="${build.tools.qmlizer}/qmlizer.js"/>
			<arg value="${build.output.dyncode}/ilib.js"/>
			<arg value="${build.output.dyncode}/ilib.js"/>
		</exec>
		<exec osfamily="windows" executable="node.exe" dir="${build.base}" failifexecutionfails="true">
            <env key="PATH" path="${env.PATH}:${nm.bin}"/>
			<arg value="${build.tools.qmlizer}/qmlizer.js"/>
			<arg value="${build.output.dyncode}/ilib.js"/>
			<arg value="${build.output.dyncode}/ilib.js"/>
		</exec>

		<!-- then do all the rest of them -->
		<apply osfamily="unix" executable="uglifyjs" dest="${build.output.dyncode}" parallel="false">
			<srcfile/>
			<arg value="--comments"/>
			<arg value="${keep.these.comments}"/>
            <arg value="-o"/>
			<targetfile/>
			<arg value="--no-mangle-functions"/>
            <arg value="-c"/>
			<arg value="-v"/>
            <fileset dir="${build.lib}">
                <include name="*.js"/>
                <exclude name="ilib.js"/>
                <exclude name="ilib-*.js"/>
                <exclude name="externs.js"/>
                <exclude name="datefmtstr.js"/>
            </fileset>
            <fileset dir="${build.lib}">
                <include name="ilib-node*"/>
                <include name="ilib-qt*"/>
                <include name="ilib-webpack*"/>
                <include name="ilib-unpack.js"/>
                <include name="ilib-web.js"/>
            </fileset>
            <fileset dir="${build.base}">
                <include name="index.js"/>
            </fileset>
			<mapper type="glob" from="*.js" to="*.js"/>
		</apply>
		<apply osfamily="windows" executable="uglifyjs.bat" dest="${build.output.dyncode}" parallel="false">
			<srcfile/>
            <arg value="--comments"/>
            <arg value="${keep.these.comments}"/>
            <arg value="-o"/>
			<targetfile/>
			<arg value="--no-mangle-functions"/>
			<arg value="-c"/>
			<arg value="-v"/>
			<fileset dir="${build.lib}" includes="*.js"  excludes="ilib.js,ilib-*.js,runner.js,externs.js,datefmtstr.js"/>
			<fileset dir="${build.lib}" includes="ilib-node*.js,ilib-webpack.js,ilib-stubs*,ilib-web.js,ilib-qt.js"/>
			<mapper type="glob" from="*.js" to="*.js"/>
		</apply>
		<apply osfamily="unix" executable="node" dest="${build.output.dyncode}" parallel="false" force="true">
			<arg value="${build.tools.qmlizer}/qmlizer.js"/>
			<srcfile/>
			<targetfile/>
			<fileset dir="${build.output.dyncode}" includes="*.js" excludes="ilib.js,ilib-*.js,runner.js,externs.js,datefmtstr.js"/>
			<fileset dir="${build.output.dyncode}" includes="ilib-node*.js,ilib-stubs*,ilib-web.js,ilib-qt.js"/>
			<mapper type="glob" from="*.js" to="*.js"/>
		</apply>
		<apply osfamily="windows" executable="node.exe" dest="${build.output.dyncode}" parallel="false" force="true">
			<arg value="${build.tools.qmlizer}/qmlizer.js"/>
			<srcfile/>
			<targetfile/>
			<fileset dir="${build.output.dyncode}" includes="*.js" excludes="ilib.js,ilib-*.js,runner.js,externs.js,datefmtstr.js"/>
			<fileset dir="${build.output.dyncode}" includes="ilib-node*.js,ilib-stubs*,ilib-web.js,ilib-qt.js"/>
			<mapper type="glob" from="*.js" to="*.js"/>
		</apply>
	</target>

	<target name="export"
			description="export all files that other subprojects may need before building"
			depends="prepare,gen.manifest.locale">
		<mkdir dir="${build.export}/locale"/>
		<copy todir="${build.export}/locale">
			<fileset dir="${build.locale}">
				<include name="**/*.json"/>
			</fileset>
		</copy>
	</target>

	<target name="dist" depends="update.package.json,assemble.core,assemble.standard,assemble.full,assemble.dynamic,doc" description="Create all distribution objects and exports them to the top level dir for packaging">
		<mkdir dir="${build.export}/js/assembled"/>
		<copy todir="${build.export}/js/assembled">
			<fileset dir="${build.output.js}">
				<include name="core-assembled-uncompiled-web/*.js"/>
				<include name="core-assembled-compiled-web/*.js"/>
				<include name="standard-assembled-uncompiled-web/*.js"/>
				<include name="standard-assembled-compiled-web/*.js"/>
				<include name="full-assembled-uncompiled-web/*.js"/>
				<include name="full-assembled-compiled-web/*.js"/>
				<include name="core-dynamicdata-uncompiled-web/*.js"/>
				<include name="core-dynamicdata-compiled-web/*.js"/>
				<include name="standard-dynamicdata-uncompiled-web/*.js"/>
				<include name="standard-dynamicdata-compiled-web/*.js"/>
				<include name="full-dynamicdata-uncompiled-web/*.js"/>
				<include name="full-dynamicdata-compiled-web/*.js"/>
			</fileset>
		</copy>
		<mkdir dir="${build.export}/js/dyncode"/>
		<copy todir="${build.export}/js/dyncode">
			<fileset dir="${build.output.dyncode}">
				<include name="**/*.js"/>
			</fileset>
		</copy>
		<mkdir dir="${build.export}/doc/jsdoc"/>
		<copy todir="${build.export}/doc/jsdoc">
			<fileset dir="${build.jsdoc}">
				<include name="**/*"/>
			</fileset>
		</copy>
		<mkdir dir="${build.export}/src/js"/>
		<copy todir="${build.export}/src/js">
			<fileset dir="${build.base}">
				<include name="lib/**"/>
				<include name="index.js"/>
				<include name="build.xml"/>
				<include name="build.properties"/>
				<include name="data/locale/**/*.json"/>
				<include name="bin/**"/>
				<include name="lib/google-closure*/**"/>
				<exclude name="runner.js"/>
				<exclude name="**/test/**"/>
				<exclude name="**/*.html"/>
				<exclude name="**/ilib-*-webpack.js"/>
			</fileset>
		</copy>
		<mkdir dir="${build.export}/package/locale"/>
		<copy todir="${build.export}/package">
			<fileset dir="${build.base}">
				<include name="package.json"/>
				<include name="../README.md"/>
			</fileset>
		</copy>
		<mkdir dir="${build.export}/package/lib"/>
		<copy todir="${build.export}/package/lib">
			<fileset dir="${build.export}/js/dyncode">
				<include name="**/*"/>
				<exclude name="*Loader.js"/>
				<exclude name="ilib-web.js"/>
				<exclude name="ilib-qt.js"/>
				<exclude name="ilib-rhino.js"/>
				<exclude name="ilib-enyo.js"/>
				<exclude name="index.js"/>
            </fileset>
            <fileset dir="${build.export}/js/dyncode">
                <include name="Loader.js"/>
                <include name="RhinoLoader.js"/>
                <include name="WebpackLoader.js"/>
                <include name="NodeLoader.js"/>
            </fileset>
			<fileset dir="${build.export}/js/assembled">
				<include name="ilib-full-dyn.js"/>
				<include name="ilib-full-dyn-compiled.js"/>
			</fileset>
		</copy>
		<copy todir="${build.export}/package">
            <fileset dir="${build.export}/js/dyncode">
                <include name="index.js"/>
            </fileset>
		</copy>
		<copy todir="${build.export}/package/locale">
			<fileset dir="${build.locale}">
				<include name="**/*.json"/>
			</fileset>
		</copy>
	</target>
    <target name="test.demo.built" description="test whether or not the ilib demo files needs to be rebuilt">
        <uptodate property="demo.already.built" targetfile="${build.demo}/ilib.js">
            <srcfiles dir="${build.demo}" includes="ilib-include.js"/>
        </uptodate>
    </target>
    <target name="scan.demo">
        <sequential>
            <echo>Scanning demo dir for ilib classes</echo>
            <exec osfamily="unix" executable="bash" dir="${build.demo}" failifexecutionfails="@{failquit}" failonerror="@{failquit}" searchpath="true">
                <env key="PATH" path="${env.PATH}:${nm.bin}"/>
                <arg value="-c"/>
                <arg value="ilib-scanner scripts/ilib-include.js --assembly=assembled --compilation=compiled --locales=${locales.demo} --ilibRoot=${build.base} --mode=production"/>
            </exec>
            <exec osfamily="windows" executable="cmd.exe" dir="${build.demo}" failifexecutionfails="@{failquit}"  failonerror="@{failquit}" searchpath="true">
                <env key="Path" path="${env.PATH}:${nm.bin}"/>
                <arg value="/c"/>
                <arg value="ilib-scanner.bat scripts/ilib-include.js --assembly=assembled --compilation=compiled --locales=${locales.demo} --ilibRoot=${build.base} --mode=production"/>
            </exec>
        </sequential>
    </target>
    <target name="scan.demo.dynamic">
        <sequential>
            <echo>Scanning demo dir for ilib classes</echo>
            <exec osfamily="unix" executable="bash" dir="${build.demo}" failifexecutionfails="@{failquit}" failonerror="@{failquit}" searchpath="true">
                <env key="PATH" path="${env.PATH}:${nm.bin}"/>
                <arg value="-c"/>
                <arg value="ilib-scanner scripts/ilib-include.js --assembly=dynamicdata --compilation=compiled --locales=${locales.demo} --ilibRoot=${build.base} --mode=production"/>
            </exec>
            <exec osfamily="windows" executable="cmd.exe" dir="${build.demo}" failifexecutionfails="@{failquit}"  failonerror="@{failquit}" searchpath="true">
                <env key="Path" path="${env.PATH}:${nm.bin}"/>
                <arg value="/c"/>
                <arg value="ilib-scanner.bat scripts/ilib-include.js --assembly=dynamicdata --compilation=compiled --locales=${locales.demo} --ilibRoot=${build.base} --mode=production"/>
            </exec>
        </sequential>
    </target>
    <target name="build.demo" depends="scan.demo">
       <sequential>
            <echo>Executing webpack</echo>
            <exec osfamily="unix" executable="webpack-cli" dir="${build.demo}/scripts" failifexecutionfails="@{failquit}" failonerror="@{failquit}">
                <env key="PATH" path="${env.PATH}:${nm.bin}"/>
                <env key="NODE_OPTIONS" value="--max-old-space-size=3072"/>
            </exec>
            <exec osfamily="windows" executable="webpack-cli.bat" dir="${build.demo}/scripts" failifexecutionfails="@{failquit}" failonerror="@{failquit}">
                <env key="PATH" path="${env.PATH}:${nm.bin}"/>
                <env key="NODE_OPTIONS" value="--max-old-space-size=3072"/>
            </exec>
        </sequential>
    </target>
    <target name="build.demo.dynamic" depends="scan.demo.dynamic">
       <sequential>
            <echo>Executing webpack</echo>
            <exec osfamily="unix" executable="webpack-cli" dir="${build.demo}/scripts" failifexecutionfails="@{failquit}" failonerror="@{failquit}">
                <env key="PATH" path="${env.PATH}:${nm.bin}"/>
                <env key="NODE_OPTIONS" value="--max-old-space-size=3072"/>
            </exec>
            <exec osfamily="windows" executable="webpack-cli.bat" dir="${build.demo}/scripts" failifexecutionfails="@{failquit}" failonerror="@{failquit}">
                <env key="PATH" path="${env.PATH}:${nm.bin}"/>
                <env key="NODE_OPTIONS" value="--max-old-space-size=3072"/>
            </exec>
        </sequential>
    </target>
	<target name="demo" depends="test.demo.built,build.demo" unless="demo.already.built" description="Copy all things needed for the demo site to the right place">
		<tar destfile="${build.demo}/demo.tgz" compression="gzip">
			<fileset dir="${build.demo}" id="id">
			    <include name="**/*.html"/>
				<include name="**/*.js"/>
				<include name="**/*.css"/>
				<include name="**/*.png"/>
			    <exclude name="**/.svn/**"/>
				<exclude name="demo.tgz"/>
			</fileset>
		</tar>
	</target>

	<macrodef name="run-nodeunit-all">
		<attribute name="assembly"/>
		<attribute name="compilation"/>
		<attribute name="sync"/>
		<attribute name="failquit"/>
		<sequential>
			<exec osfamily="unix" executable="node" dir="${build.test}" failifexecutionfails="@{failquit}" failonerror="@{failquit}">
                <env key="PATH" path="${env.PATH}:${nm.bin}"/>
				<arg line="testRunner.js"/>
				<arg line="@{assembly}"/>
				<arg line="@{compilation}"/>
				<arg line="all"/>
				<arg line="@{sync}"/>
			</exec>
			<exec osfamily="windows" executable="node.exe" dir="${build.test}" failifexecutionfails="@{failquit}"  failonerror="@{failquit}">
                <env key="PATH" path="${env.PATH}:${nm.bin}"/>
				<arg line="testRunner.js"/>
				<arg line="@{assembly}"/>
				<arg line="@{compilation}"/>
				<arg line="all"/>
				<arg line="@{sync}"/>
			</exec>
		</sequential>
	</macrodef>

	<macrodef name="run-nodeunit">
		<attribute name="suite"/>
		<attribute name="failquit"/>
		<attribute name="file"/>
		<sequential>
			<exec osfamily="unix" executable="node" dir="${build.test}" failifexecutionfails="@{failquit}" failonerror="@{failquit}">
                <env key="PATH" path="${env.PATH}:${nm.bin}"/>
				<arg line="@{suite}/@{file}"/>
			</exec>
			<exec osfamily="windows" executable="node.exe" dir="${build.test}" failifexecutionfails="@{failquit}"  failonerror="@{failquit}">
                <env key="PATH" path="${env.PATH}:${nm.bin}"/>
				<arg line="@{suite}/@{file}"/>
			</exec>
		</sequential>
	</macrodef>

    <macrodef name="run-nodeunit-sync">
	<attribute name="suite"/>
        <attribute name="failquit"/>
		<sequential>
		    <run-nodeunit suite="@{suite}" failquit="@{failquit}" file="testSuite.js"/>
		</sequential>
	</macrodef>
    <macrodef name="run-nodeunit-async">
        <attribute name="suite"/>
        <attribute name="failquit"/>
        <sequential>
            <run-nodeunit suite="@{suite}" failquit="@{failquit}" file="testSuiteAsync.js"/>
        </sequential>
    </macrodef>

	<macrodef name="debug-nodeunit">
		<attribute name="suite"/>
		<attribute name="failquit"/>
		<sequential>
			<exec osfamily="unix" executable="node" dir="${build.test}" failifexecutionfails="@{failquit}" failonerror="@{failquit}">
                <env key="PATH" path="${env.PATH}:${nm.bin}"/>
				<arg line="--inspect-brk"/>
				<arg line="@{suite}/testSuite.js"/>
			</exec>
			<exec osfamily="windows" executable="node.exe" dir="${build.test}" failifexecutionfails="@{failquit}"  failonerror="@{failquit}">
                <env key="PATH" path="${env.PATH}:${nm.bin}"/>
				<arg line="--inspect-brk"/>
				<arg line="@{suite}/testSuite.js"/>
			</exec>
		</sequential>
	</macrodef>

	<target depends="prepare,gen.manifest.locale" name="test.address">
		<run-nodeunit-sync suite="address" failquit="true"/>
		<run-nodeunit-async suite="address" failquit="true"/>
	</target>
	<target depends="prepare,gen.manifest.locale" name="test.calendar">
		<run-nodeunit-sync suite="calendar" failquit="true"/>
		<run-nodeunit-async suite="calendar" failquit="true"/>
	</target>
	<target depends="prepare,gen.manifest.locale" name="test.collate">
		<run-nodeunit-sync suite="collate" failquit="true"/>
		<run-nodeunit-async suite="collate" failquit="true"/>
	</target>
	<target depends="prepare,gen.manifest.locale" name="test.ctype">
		<run-nodeunit-sync suite="ctype" failquit="true"/>
		<run-nodeunit-async suite="ctype" failquit="true"/>
	</target>
	<target depends="prepare,gen.manifest.locale" name="test.date">
		<run-nodeunit-sync suite="date" failquit="true"/>
		<run-nodeunit-async suite="date" failquit="true"/>
	</target>
	<target depends="prepare,gen.manifest.locale" name="test.daterange">
		<run-nodeunit-sync suite="daterange" failquit="true"/>
		<run-nodeunit-async suite="daterange" failquit="true"/>
	</target>
	<target depends="prepare,gen.manifest.locale" name="test.durfmt">
		<run-nodeunit-sync suite="durfmt" failquit="true"/>
		<run-nodeunit-async suite="durfmt" failquit="true"/>
	</target>
	<target depends="prepare,gen.manifest.locale" name="test.maps">
		<run-nodeunit-sync suite="maps" failquit="true"/>
		<run-nodeunit-async suite="maps" failquit="true"/>
	</target>
	<target depends="prepare,gen.manifest.locale" name="test.name">
		<run-nodeunit-sync suite="name" failquit="true"/>
		<run-nodeunit-async suite="name" failquit="true"/>
	</target>
	<target depends="prepare,gen.manifest.locale" name="test.number">
		<run-nodeunit-sync suite="number" failquit="true"/>
		<run-nodeunit-async suite="number" failquit="true"/>
	</target>
	<target depends="prepare,gen.manifest.locale" name="test.phone">
		<run-nodeunit-sync suite="phone" failquit="true"/>
		<run-nodeunit-async suite="phone" failquit="true"/>
	</target>
	<target depends="prepare,gen.manifest.locale" name="test.root">
		<run-nodeunit-sync suite="root" failquit="true"/>
		<run-nodeunit-async suite="root" failquit="true"/>
	</target>
	<target depends="prepare,gen.manifest.locale" name="test.strings-ext">
		<run-nodeunit-sync suite="strings-ext" failquit="true"/>
		<run-nodeunit-async suite="strings-ext" failquit="true"/>
	</target>
	<target depends="prepare,gen.manifest.locale" name="test.units">
		<run-nodeunit-sync suite="units" failquit="true"/>
		<run-nodeunit-async suite="units" failquit="true"/>
	</target>
	<target depends="prepare,gen.manifest.locale" name="test.util">
		<run-nodeunit-sync suite="util" failquit="true"/>
	</target>

	<target depends="prepare,gen.manifest.locale" name="debug.address">
		<debug-nodeunit suite="address" failquit="true"/>
	</target>
	<target depends="prepare,gen.manifest.locale" name="debug.calendar">
		<debug-nodeunit suite="calendar" failquit="true"/>
	</target>
	<target depends="prepare,gen.manifest.locale" name="debug.collate">
		<debug-nodeunit suite="collate" failquit="true"/>
	</target>
	<target depends="prepare,gen.manifest.locale" name="debug.ctype">
		<debug-nodeunit suite="ctype" failquit="true"/>
	</target>
	<target depends="prepare,gen.manifest.locale" name="debug.date">
		<debug-nodeunit suite="date" failquit="true"/>
	</target>
	<target depends="prepare,gen.manifest.locale" name="debug.daterange">
		<debug-nodeunit suite="daterange" failquit="true"/>
	</target>
	<target depends="prepare,gen.manifest.locale" name="debug.durfmt">
		<debug-nodeunit suite="durfmt" failquit="true"/>
	</target>
	<target depends="prepare,gen.manifest.locale" name="debug.maps">
		<debug-nodeunit suite="maps" failquit="true"/>
	</target>
	<target depends="prepare,gen.manifest.locale" name="debug.name">
		<debug-nodeunit suite="name" failquit="true"/>
	</target>
	<target depends="prepare,gen.manifest.locale" name="debug.number">
		<debug-nodeunit suite="number" failquit="true"/>
	</target>
	<target depends="prepare,gen.manifest.locale" name="debug.phone">
		<debug-nodeunit suite="phone" failquit="true"/>
	</target>
	<target depends="prepare,gen.manifest.locale" name="debug.root">
		<debug-nodeunit suite="root" failquit="true"/>
	</target>
	<target depends="prepare,gen.manifest.locale" name="debug.strings-ext">
		<debug-nodeunit suite="strings-ext" failquit="true"/>
	</target>
	<target depends="prepare,gen.manifest.locale" name="debug.units">
		<debug-nodeunit suite="units" failquit="true"/>
	</target>
	<target depends="prepare,gen.manifest.locale" name="debug.util">
		<debug-nodeunit suite="util" failquit="true"/>
	</target>

	<target name="test.dynamic.uncompiled" depends="prepare,gen.manifest.locale,update.package.json">
        <run-nodeunit-all assembly="dynamic" compilation="uncompiled" sync="async" failquit="true"/>
	    <run-nodeunit-all assembly="dynamic" compilation="uncompiled" sync="sync" failquit="true"/>
	</target>
	<target name="test.dynamic.compiled" depends="prepare,gen.manifest.locale,update.package.json">
	    <run-nodeunit-all assembly="dynamic" compilation="compiled" sync="sync" failquit="true"/>
		<run-nodeunit-all assembly="dynamic" compilation="compiled" sync="async" failquit="true"/>
	</target>
	<target name="test.assembled.uncompiled" depends="update.package.json,assemble.unittest.assembled.node">
	    <run-nodeunit-all assembly="assembled" compilation="uncompiled" sync="sync" failquit="true"/>
		<run-nodeunit-all assembly="assembled" compilation="uncompiled" sync="async" failquit="true"/>
	</target>
	<target name="test.assembled.compiled" depends="update.package.json,assemble.unittest.assembled.node">
	    <run-nodeunit-all assembly="assembled" compilation="compiled" sync="sync" failquit="true"/>
		<run-nodeunit-all assembly="assembled" compilation="compiled" sync="async" failquit="true"/>
	</target>
	<target name="test.dyndata.uncompiled" depends="update.package.json,assemble.unittest.dyndata.node">
	    <run-nodeunit-all assembly="dynamicdata" compilation="uncompiled" sync="sync" failquit="true"/>
	    <run-nodeunit-all assembly="dynamicdata" compilation="uncompiled" sync="async" failquit="true"/>
	</target>
	<target name="test.dyndata.compiled" depends="update.package.json,assemble.unittest.dyndata.node">
	    <run-nodeunit-all assembly="dynamicdata" compilation="compiled" sync="sync" failquit="true"/>
	    <run-nodeunit-all assembly="dynamicdata" compilation="compiled" sync="async" failquit="true"/>
	</target>

	<target name="test.compiled" depends="test.dynamic.compiled,test.assembled.compiled,test.dyndata.compiled"/>
	<target name="test.uncompiled" depends="test.dynamic.uncompiled,test.assembled.uncompiled,test.dyndata.uncompiled"/>

	<target name="test.all" depends="test.dynamic.uncompiled,test.dynamic.compiled,test.assembled.uncompiled,test.assembled.compiled,test.dyndata.uncompiled,test.dyndata.compiled" />

	<macrodef name="runtests">
            <attribute name="assembly"/>
            <attribute name="compilation"/>
            <attribute name="suite"/>
		<attribute name="failquit"/>
		<sequential>
			<exec osfamily="unix" executable="node" dir="${build.test}" failifexecutionfails="@{failquit}" failonerror="@{failquit}">
                <env key="PATH" path="${env.PATH}:${nm.bin}"/>
				<arg line="testSuite.js"/>
				<arg line="@{assembly}"/>
				<arg line="@{compilation}"/>
				<arg line="@{suite}"/>
				<arg line="@{sync}"/>
			</exec>
			<exec osfamily="windows" executable="node.exe" dir="${build.test}" failifexecutionfails="@{failquit}"  failonerror="@{failquit}">
                <env key="PATH" path="${env.PATH}:${nm.bin}"/>
				<arg line="testSuite.js"/>
				<arg line="@{assembly}"/>
				<arg line="@{compilation}"/>
				<arg line="@{suite}"/>
				<arg line="@{sync}"/>
			</exec>
		</sequential>
	</macrodef>
	<macrodef name="run">
        <attribute name="script"/>
        <attribute name="args"/>
		<attribute name="dir"/>
		<sequential>
			<exec osfamily="unix" executable="node" dir="@{dir}" failifexecutionfails="true" failonerror="true">
                <env key="PATH" path="${env.PATH}:${nm.bin}"/>
				<arg line="@{script}"/>
				<arg line="@{args}"/>
				<arg line="nodejs"/>
			</exec>
			<exec osfamily="windows" executable="node.exe" dir="@{dir}" failifexecutionfails="true"  failonerror="true">
                <env key="PATH" path="${env.PATH}:${nm.bin}"/>
				<arg line="@{script}"/>
				<arg line="@{args}"/>
				<arg line="nodejs"/>
			</exec>
		</sequential>
	</macrodef>

	<target name="test.core" depends="test.compiled,test.uncompiled"
			description="run the tests">
	</target>
	<target name="core.junit.report" description="Generate a report on the junit tests" />
	<!-- target name="test" depends="test.core"/ -->
	<target name="test.only" depends="test.all" description="Run all tests"/>
	<target name="reports.only" depends="core.junit.report" description="Generate reports on previously run tests"/>
	<target name="reports" depends="test.only,reports.only" description="Run all tests, then generate reports on the results"/>
	<target name="test" depends="reports" description="Run all tests and build all reports"/>

    <!-- macrodef name="expand">
        <attribute name="dir"/>
        <attribute name="pattern"/>
        <sequential>
            <exec osfamily="unix" executable="bash" dir="@{dir}" failifexecutionfails="true" failonerror="true" outputproperty="expanded.files">
                <env key="PATH" path="${env.PATH}:${nm.bin}"/>
                <arg value="-c"/>
                <arg value="ls -1 @{pattern}"/>
            </exec>
            < ! - - relies on cygwin ls - - >
            <exec osfamily="windows" executable="cmd.exe" dir="@{dir}" failifexecutionfails="true" failonerror="true" outputproperty="expanded.files">
                <env key="PATH" path="${env.PATH}:${nm.bin}"/>
                <arg line="/c"/>
                <arg line="ls -1 @{pattern}"/>
            </exec>
        </sequential>
    </macrodef -->

	<target name="testjsdoc" description="test whether or not the jsdocs need to be rebuilt">
		<uptodate
                property="core.jsdoc.not.needed"
                targetfile="${build.jsdoc}/index.html">
			<srcfiles dir="${build.lib}" includes="*.js"/>
		</uptodate>
	</target>
	<target name="doc"
            depends="testjsdoc"
            description="creates jsdoc for all local js files in this project"
            unless="core.jsdoc.not.needed">
		<delete dir="${build.jsdoc}"/>
		<mkdir dir="${build.jsdoc}"/>
		<echo>Executing jsdoc ... </echo>
		<sequential>
            <exec osfamily="unix" executable="bash" dir="${build.base}" failifexecutionfails="@{failquit}" failonerror="@{failquit}">
                <env key="PATH" path="${env.PATH}:${nm.bin}"/>
                <arg value="-c"/>
                <arg value="jsdoc2 --template=${JSDOCDIR}/templates/jsdoc --directory=${build.jsdoc} --recurse=100 --encoding=utf-8 lib/*.js"/>
            </exec>
            <exec osfamily="windows" executable="cmd.exe" dir="${build.base}" failifexecutionfails="@{failquit}"  failonerror="@{failquit}">
                <env key="PATH" path="${env.PATH}:${nm.bin}"/>
                <arg value="/c"/>
                <arg value="jsdoc2 --template=${JSDOCDIR}/templates/jsdoc --directory=${build.jsdoc} --recurse=100 --encoding=utf-8 lib/*.js"/>
            </exec>
        </sequential>
	</target>
    <target name="apidocs"
            depends="doc"
            description="Updates the API docs">
        <mkdir dir="${build.apidocs}"/>
        <copy todir="${build.apidocs}">
            <fileset dir="${build.jsdoc}">
                <include name="**/*.html"/>
            </fileset>
        </copy>
    </target>
	<target name="testinfo" description="test whether or not the localeinfo.json files need to rebuilt">
		<uptodate property="info.not.needed" targetFile="${build.locale.src}/localeinfo.stamp">
			<srcfiles dir="${build.locale.src}" includes="**/*.jf"/>
		</uptodate>
	</target>
	<target name="geninfo"
			depends="testinfo"
			description="generates the localeinfo.json files out of the *.jf files"
			unless="info.not.needed">
		<sequential>
			<exec osfamily="unix" executable="node" dir="${build.locale.src}">
                <env key="PATH" path="${env.PATH}:${nm.bin}"/>
				<arg value="${build.tools.build}/mkli.js"/>
			</exec>
			<exec osfamily="windows" executable="node.exe" dir="${build.locale.src}">
                <env key="PATH" path="${env.PATH}:${nm.bin}"/>
				<arg value="${build.tools.build}/mkli.js"/>
			</exec>
		</sequential>
		<touch file="${build.locale.src}/localeinfo.stamp"/>
	</target>
	<target name="testlocalejson" description="test whether or not the json files need to compressed">
		<uptodate property="json.compress.not.needed" targetFile="${build.locale.src}/jsoncompress.stamp">
			<srcfiles dir="${build.locale.src}" includes="**/*.json"/>
		</uptodate>
	</target>
	<target name="compress.locale.json"
			depends="geninfo,testlocalejson"
			description="compresses the json files"
			unless="json.compress.not.needed">
		<sequential>
			<exec osfamily="unix" executable="node" dir="${build.locale.src}" failifexecutionfails="true" failonerror="true">
                <env key="PATH" path="${env.PATH}:${nm.bin}"/>
				<arg value="${build.tools.build}/jsoncompress.js"/>
				<arg value="."/>
				<arg value="${build.locale}"/>
			</exec>
			<exec osfamily="windows" executable="node.exe" dir="${build.locale.src}">
                <env key="PATH" path="${env.PATH}:${nm.bin}"/>
				<arg value="${build.tools.build}/jsoncompress.js"/>
				<arg value="."/>
				<arg value="${build.locale}"/>
			</exec>
		</sequential>
		<touch file="${build.locale.src}/jsoncompress.stamp"/>
	</target>
	<target name="test.locale.manifest" description="test whether or not the locale manifest needs to be regenerated">
		<uptodate property="locale.manifest.not.needed" targetFile="${build.locale}/ilibmanifest.json">
			<srcfiles dir="${build.locale}" includes="**/*.json"/>
		</uptodate>
	</target>
	<target name="gen.manifest.locale"
			depends="compress.locale.json,test.locale.manifest"
			description="produces the ilibmanifest.json file"
			unless="locale.manifest.not.needed">
		<sequential>
			<exec osfamily="unix" executable="node" dir="${build.locale}">
	            <env key="PATH" path="${env.PATH}:${nm.bin}"/>
				<arg value="${build.tools.build}/mkmf.js"/>
			</exec>
			<exec osfamily="windows" executable="node.exe" dir="${build.locale}">
	            <env key="PATH" path="${env.PATH}:${nm.bin}"/>
				<arg value="${build.tools.build}/mkmf.js"/>
			</exec>
		</sequential>
	</target>
	<target name="testpackagejson" description="test whether or not the package.json file needs to be rebuilt">
		<uptodate
                property="package.json.not.needed"
                targetfile="${build.base}/package.json">
			<srcfiles dir="${build.base}" includes="package.json.template" />
			<srcfiles dir="${build.base}/.." includes="build.properties" />
		</uptodate>
	</target>
	<target name="update.package.json" depends="testpackagejson" unless="package.json.not.needed"
			description="Update the package.json file to insert the version number into it automatically.">
		<copy file="${build.base}/package.json.template" toFile="${build.base}/package.json">
			<filterset>
				<filter token="fullversion" value="${version}"/>
			</filterset>
		</copy>
	</target>
	<macrodef name="npm">
        <attribute name="command"/>
        <attribute name="args"/>
		<attribute name="dir"/>
		<sequential>
			<exec osfamily="unix" executable="npm" dir="@{dir}" failifexecutionfails="true" failonerror="true">
                <env key="PATH" path="${env.PATH}:${nm.bin}"/>
				<arg line="@{command}"/>
				<arg line="@{args}"/>
			</exec>
			<exec osfamily="windows" executable="npm.exe" dir="@{dir}" failifexecutionfails="true"  failonerror="true">
                <env key="PATH" path="${env.PATH}:${nm.bin}"/>
				<arg line="@{command}"/>
				<arg line="@{args}"/>
			</exec>
		</sequential>
	</macrodef>
	<target name="npm.set.parseable.true">
		<npm command="config" args="set parseable true" dir="${build.base}"/>
	</target>
	<target name="location.trireme">
	    <sequential>
            <exec osfamily="unix" outputproperty="trireme.location" resultproperty="trireme.result" errorproperty="trireme.error" executable="sh" dir="${build.base}" failifexecutionfails="true">
                <env key="PATH" path="${env.PATH}:${nm.bin}"/>
	    		<arg value="-c"/>
				<arg value="npm list trireme | tail -1"/>
			</exec>
			<exec osfamily="windows" outputproperty="trireme.location" resultproperty="trireme.result" errorproperty="trireme.error" executable="cmd.exe" dir="${build.base}" failifexecutionfails="true">
                <env key="PATH" path="${env.PATH}:${nm.bin}"/>
	    		<arg value="/c"/>
				<arg value="npm list trireme | tail -1"/>
			</exec>
	    </sequential>
	</target>
	<target name="testtriremeinstalled" depends="npm.set.parseable.true,location.trireme">
    	<condition property="trireme.installed">
    		<and>
    	    	<equals arg1="${trireme.result}" arg2="0"/>
    			<length string="${trireme.location}" trim="true" when="greater" length="0" />
    	    </and>
    	</condition>
    	<echo>trireme installed: ${trireme.installed} at location ${trireme.location}</echo>
    </target>
	<target name="install.trireme" unless="trireme.installed" depends="testtriremeinstalled">
		<echo>Installing trireme</echo>
		<npm command="install" args="trireme" dir="${build.base}"/>
		<echo>Done.</echo>
	</target>
	<macrodef name="runtests.rhino">
		<attribute name="assembly"/>
        <attribute name="compilation"/>
        <attribute name="suite"/>
		<attribute name="failquit"/>
		<sequential>
			<java	dir="${build.test}"
					classname="io.apigee.trireme.shell.Main"
					fork="true"
					maxmemory="4096m"
				 	failifexecutionfails="@{failquit}">
				<jvmarg value="-XX:MaxPermSize=96m"/>
				<jvmarg value="-Xms256m"/>
				<jvmarg value="-Xmx2048m"/>
				<arg value="./testSuite.js"/>
				<arg line="@{assembly}"/>
				<arg line="@{compilation}"/>
				<arg line="@{suite}"/>
				<classpath>
					<pathelement path="${trireme.location}/lib/*"/>
					<pathelement path="${trireme.location}/lib"/>
					<pathelement path="${java.class.path}"/>
				</classpath>
			</java>
		</sequential>
	</macrodef>
	<macrodef name="runallsuites.rhino">
        <attribute name="assembly"/>
        <attribute name="compilation"/>
        <attribute name="failquit"/>
		<sequential>
			<runtests.rhino suite="util" assembly="@{assembly}" compilation="@{compilation}" failquit="@{failquit}"/>
			<runtests.rhino suite="." assembly="@{assembly}" compilation="@{compilation}" failquit="@{failquit}"/>
			<runtests.rhino suite="calendar" assembly="@{assembly}" compilation="@{compilation}" failquit="@{failquit}"/>
			<runtests.rhino suite="date1" assembly="@{assembly}" compilation="@{compilation}" failquit="@{failquit}"/>
			<runtests.rhino suite="date2" assembly="@{assembly}" compilation="@{compilation}" failquit="@{failquit}"/>
			<runtests.rhino suite="date3" assembly="@{assembly}" compilation="@{compilation}" failquit="@{failquit}"/>
			<runtests.rhino suite="daterange1" assembly="@{assembly}" compilation="@{compilation}" failquit="@{failquit}"/>
			<runtests.rhino suite="daterange2" assembly="@{assembly}" compilation="@{compilation}" failquit="@{failquit}"/>
			<runtests.rhino suite="daterange3" assembly="@{assembly}" compilation="@{compilation}" failquit="@{failquit}"/>
			<runtests.rhino suite="durfmt" assembly="@{assembly}" compilation="@{compilation}" failquit="@{failquit}"/>
			<runtests.rhino suite="number" assembly="@{assembly}" compilation="@{compilation}" failquit="@{failquit}"/>
			<runtests.rhino suite="maps" assembly="@{assembly}" compilation="@{compilation}" failquit="@{failquit}"/>
			<runtests.rhino suite="ctype" assembly="@{assembly}" compilation="@{compilation}" failquit="@{failquit}"/>
			<runtests.rhino suite="strings-ext" assembly="@{assembly}" compilation="@{compilation}" failquit="@{failquit}"/>
			<runtests.rhino suite="phone1" assembly="@{assembly}" compilation="@{compilation}" failquit="@{failquit}"/>
			<runtests.rhino suite="phone2" assembly="@{assembly}" compilation="@{compilation}" failquit="@{failquit}"/>
			<runtests.rhino suite="phone3" assembly="@{assembly}" compilation="@{compilation}" failquit="@{failquit}"/>
			<runtests.rhino suite="units" assembly="@{assembly}" compilation="@{compilation}" failquit="@{failquit}"/>
			<runtests.rhino suite="name" assembly="@{assembly}" compilation="@{compilation}" failquit="@{failquit}"/>
			<runtests.rhino suite="address1" assembly="@{assembly}" compilation="@{compilation}" failquit="@{failquit}"/>
			<runtests.rhino suite="address2" assembly="@{assembly}" compilation="@{compilation}" failquit="@{failquit}"/>
			<runtests.rhino suite="address3" assembly="@{assembly}" compilation="@{compilation}" failquit="@{failquit}"/>
			<runtests.rhino suite="collate" assembly="@{assembly}" compilation="@{compilation}" failquit="@{failquit}"/>
		</sequential>
	</macrodef>
	<target name="test.assembled.compiled.rhino" depends="assemble.unittest,location.trireme">
		<runallsuites.rhino assembly="assembled" compilation="compiled" failquit="true"/>
	</target>
	<target name="test.assembled.uncompiled.rhino" depends="assemble.unittest,location.trireme">
		<runallsuites.rhino assembly="assembled" compilation="uncompiled" failquit="true"/>
	</target>
	<target name="test.dynamic.uncompiled.rhino" depends="location.trireme,prepare,gen.manifest.locale">
		<runallsuites.rhino assembly="dynamic" compilation="uncompiled" failquit="true"/>
	</target>
	<target name="test.dynamic.compiled.rhino" depends="location.trireme,prepare,gen.manifest.locale">
		<runallsuites.rhino assembly="dynamic" compilation="compiled" failquit="true"/>
	</target>
	<target name="test.dynamicdata.compiled.rhino" depends="assemble.unittest.dyndata,location.trireme">
		<runallsuites.rhino assembly="dynamicdata" compilation="compiled" failquit="true"/>
	</target>
	<target name="test.dynamicdata.uncompiled.rhino" depends="assemble.unittest.dyndata,location.trireme">
		<runallsuites.rhino assembly="dynamicdata" compilation="uncompiled" failquit="true"/>
	</target>
	<target name="test.calendar.rhino" depends="location.trireme,gen.manifest.locale">
		<runtests.rhino suite="calendar" assembly="dynamic" compilation="uncompiled" failquit="true"/>
	</target>
	<target name="test.units.rhino" depends="location.trireme,gen.manifest.locale">
		<runtests.rhino suite="units" assembly="dynamic" compilation="uncompiled" failquit="true"/>
	</target>
	<target name="test.rhino" depends="test.assembled.compiled.rhino,test.assembled.uncompiled.rhino,test.dynamic.uncompiled.rhino,test.dynamic.compiled.rhino">
	</target>

	<target name="test.remote" depends="prepare,assemble.unittest.assembled,assemble.unittest.dyndata" description="Run a remote server to test ilib in remote browsers">
	   <sequential>
		    <exec osfamily="unix" executable="node" dir="${build.base}" failifexecutionfails="true">
	            <env key="PATH" path="${env.PATH}:${nm.bin}"/>
				<arg value="../node_modules/http-server/bin/http-server"/>
				<arg value="-p"/>
				<arg value="9090"/>
			</exec>
			<exec osfamily="windows" executable="node.exe" dir="${build.base}" failifexecutionfails="true">
	            <env key="PATH" path="${env.PATH}:${nm.bin}"/>
				<arg value="../node_modules/http-server/bin/http-server"/>
			</exec>
	   </sequential>
	</target>
</project>
